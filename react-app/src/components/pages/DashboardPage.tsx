import React, { useMemo } from 'react';
import {
  Container,
  Typography,
  Paper,
  Box,
  IconButton,
  Grid,
  Card,
  CardContent,
  Chip,
  LinearProgress,
  Avatar,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemIcon
} from '@mui/material';
import { 
  Dashboard, 
  ArrowBack,
  TrendingUp,
  Assessment,
  Psychology,
  AccountTree,
  Casino,
  EmojiEvents,
  Insights,
  Speed,
  Timeline,
  Star
} from '@mui/icons-material';
import { 
  PieChart, 
  Pie, 
  Cell, 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer,
  LineChart,
  Line,
  Area,
  AreaChart
} from 'recharts';
import { useNavigate } from 'react-router-dom';
import { useDecisionStore } from '@/store/useDecisionStore';
import { useAuthStore } from '@/store/useAuthStore';
import { Decision, DecisionType, UserInsight } from '@/types';

const COLORS = {
  simple: '#1FB8CD',
  complex: '#FFC185', 
  random: '#B4413C'
};

const DashboardPage: React.FC = () => {
  const navigate = useNavigate();
  const { decisions } = useDecisionStore();
  const { user, isDemo } = useAuthStore();

  // Calculate analytics data
  const analytics = useMemo(() => {
    if (decisions.length === 0) {
      return {
        totalDecisions: 0,
        avgSatisfaction: 0,
        avgConfidence: 0,
        typeDistribution: [],
        recentTrend: [],
        topChoices: [],
        insights: []
      };
    }

    // Basic stats
    const totalDecisions = decisions.length;
    const avgSatisfaction = decisions.reduce((sum, d) => sum + (d.outcomeRating || 4), 0) / totalDecisions;
    const avgConfidence = decisions.reduce((sum, d) => sum + (d.confidenceScore || 70), 0) / totalDecisions;

    // Type distribution
    const typeCount = decisions.reduce((acc, decision) => {
      acc[decision.decisionType] = (acc[decision.decisionType] || 0) + 1;
      return acc;
    }, {} as Record<DecisionType, number>);

    const typeDistribution = Object.entries(typeCount).map(([type, count]) => ({
      name: type === 'simple' ? '–ë—ã—Å—Ç—Ä—ã–µ' : type === 'complex' ? '–°–ª–æ–∂–Ω—ã–µ' : '–°–ª—É—á–∞–π–Ω—ã–µ',
      value: count,
      color: COLORS[type as DecisionType]
    }));

    // Recent trend (last 7 decisions)
    const recent = decisions.slice(0, 7).reverse();
    const recentTrend = recent.map((decision, index) => ({
      name: `${index + 1}`,
      confidence: decision.confidenceScore || 70,
      satisfaction: (decision.outcomeRating || 4) * 20 // Convert to 0-100 scale
    }));

    // Top choices
    const choiceCount = decisions.reduce((acc, decision) => {
      if (decision.chosenOption) {
        acc[decision.chosenOption] = (acc[decision.chosenOption] || 0) + 1;
      }
      return acc;
    }, {} as Record<string, number>);

    const topChoices = Object.entries(choiceCount)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([choice, count]) => ({ choice, count }));

    // Generate insights
    const insights: UserInsight[] = [];

    if (avgConfidence > 80) {
      insights.push({
        type: 'achievement',
        title: '–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
        description: `–í–∞—à–∞ —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ—à–µ–Ω–∏—è—Ö —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${avgConfidence.toFixed(1)}%`,
        icon: 'üéØ',
        confidence: avgConfidence
      });
    }

    if (avgSatisfaction > 4) {
      insights.push({
        type: 'achievement',
        title: '–û—Ç–ª–∏—á–Ω–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
        description: `–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –≤–∞—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π: ${avgSatisfaction.toFixed(1)}/5`,
        icon: '‚≠ê',
        confidence: avgSatisfaction * 20
      });
    }

    const mostUsedType = Object.entries(typeCount).reduce((a, b) => a[1] > b[1] ? a : b);
    insights.push({
      type: 'pattern',
      title: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–∏–ø',
      description: `–ß–∞—â–µ –≤—Å–µ–≥–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ${
        mostUsedType[0] === 'simple' ? '–±—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è' : 
        mostUsedType[0] === 'complex' ? '—Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑' : '—Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä'
      }`,
      icon: 'üìä',
      confidence: (mostUsedType[1] / totalDecisions) * 100
    });

    if (totalDecisions >= 10) {
      insights.push({
        type: 'achievement',
        title: '–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        description: `–í—ã –ø—Ä–∏–Ω—è–ª–∏ —É–∂–µ ${totalDecisions} —Ä–µ—à–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò!`,
        icon: 'üèÜ',
        confidence: 100
      });
    }

    return {
      totalDecisions,
      avgSatisfaction,
      avgConfidence,
      typeDistribution,
      recentTrend,
      topChoices,
      insights
    };
  }, [decisions]);

  const StatCard = ({ title, value, subtitle, icon, color = 'primary' }: {
    title: string;
    value: string | number;
    subtitle?: string;
    icon: React.ReactNode;
    color?: 'primary' | 'secondary' | 'success' | 'warning' | 'error';
  }) => (
    <Card>
      <CardContent>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
          <Avatar sx={{ backgroundColor: `${color}.main`, mr: 2 }}>
            {icon}
          </Avatar>
          <Box>
            <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
              {value}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {title}
            </Typography>
          </Box>
        </Box>
        {subtitle && (
          <Typography variant="caption" color="text.secondary">
            {subtitle}
          </Typography>
        )}
      </CardContent>
    </Card>
  );

  if (decisions.length === 0) {
    return (
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
          <IconButton onClick={() => navigate('/')} sx={{ mr: 2 }}>
            <ArrowBack />
          </IconButton>
          <Typography variant="h4">
            –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥
          </Typography>
        </Box>

        <Paper sx={{ p: 4, textAlign: 'center' }}>
          <Assessment sx={{ fontSize: '4rem', color: 'text.secondary', mb: 2 }} />
          <Typography variant="h5" gutterBottom>
            –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
          </Typography>
          <Typography color="text.secondary" sx={{ mb: 3 }}>
            –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
          </Typography>
          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>
            <Chip
              icon={<Psychology />}
              label="–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ"
              clickable
              onClick={() => navigate('/decision/simple')}
            />
            <Chip
              icon={<AccountTree />}
              label="–°–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
              clickable
              onClick={() => navigate('/decision/complex')}
            />
            <Chip
              icon={<Casino />}
              label="–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä"
              clickable
              onClick={() => navigate('/decision/random')}
            />
          </Box>
        </Paper>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
        <IconButton onClick={() => navigate('/')} sx={{ mr: 2 }}>
          <ArrowBack />
        </IconButton>
        <Box sx={{ flexGrow: 1 }}>
          <Typography variant="h4" gutterBottom>
            –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥
          </Typography>
          <Typography variant="body2" color="text.secondary">
            {isDemo ? '–õ–æ–∫–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞' : '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ—à–µ–Ω–∏–π'}
          </Typography>
        </Box>
      </Box>

      {/* Stats Cards */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="–†–µ—à–µ–Ω–∏–π –ø—Ä–∏–Ω—è—Ç–æ"
            value={analytics.totalDecisions}
            subtitle="–í—Å–µ–≥–æ —Å –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
            icon={<Speed />}
            color="primary"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞"
            value={`${analytics.avgSatisfaction.toFixed(1)}/5`}
            subtitle="–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"
            icon={<Star />}
            color="success"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò"
            value={`${analytics.avgConfidence.toFixed(0)}%`}
            subtitle="–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
            icon={<TrendingUp />}
            color="warning"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="–ò–Ω—Å–∞–π—Ç–æ–≤"
            value={analytics.insights.length}
            subtitle="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
            icon={<Insights />}
            color="secondary"
          />
        </Grid>
      </Grid>

      <Grid container spacing={3}>
        {/* Type Distribution Chart */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ä–µ—à–µ–Ω–∏–π
              </Typography>
              <Box sx={{ height: 300 }}>
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={analytics.typeDistribution}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ name, value }) => `${name}: ${value}`}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {analytics.typeDistribution.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip />
                    <Legend />
                  </PieChart>
                </ResponsiveContainer>
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Recent Trend */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ—à–µ–Ω–∏–π
              </Typography>
              <Box sx={{ height: 300 }}>
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={analytics.recentTrend}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line 
                      type="monotone" 
                      dataKey="confidence" 
                      stroke="#1FB8CD" 
                      strokeWidth={2}
                      name="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò (%)"
                    />
                    <Line 
                      type="monotone" 
                      dataKey="satisfaction" 
                      stroke="#FFC185" 
                      strokeWidth={2}
                      name="–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)"
                    />
                  </LineChart>
                </ResponsiveContainer>
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Top Choices */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤—ã–±–æ—Ä—ã
              </Typography>
              <List>
                {analytics.topChoices.map((item, index) => (
                  <ListItem key={index}>
                    <ListItemIcon>
                      <Avatar sx={{ width: 32, height: 32, bgcolor: 'primary.main' }}>
                        {index + 1}
                      </Avatar>
                    </ListItemIcon>
                    <ListItemText
                      primary={item.choice}
                      secondary={`–í—ã–±—Ä–∞–Ω–æ ${item.count} —Ä–∞–∑`}
                    />
                  </ListItem>
                ))}
              </List>
            </CardContent>
          </Card>
        </Grid>

        {/* AI Insights */}
        <Grid item xs={12} md={6}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                –ò–ò –ò–Ω—Å–∞–π—Ç—ã
              </Typography>
              {analytics.insights.map((insight, index) => (
                <Box key={index} sx={{ mb: 2 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <Typography variant="h6" sx={{ mr: 1 }}>
                      {insight.icon}
                    </Typography>
                    <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                      {insight.title}
                    </Typography>
                  </Box>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                    {insight.description}
                  </Typography>
                  <LinearProgress
                    variant="determinate"
                    value={insight.confidence}
                    sx={{ height: 6, borderRadius: 3 }}
                  />
                  {index < analytics.insights.length - 1 && <Divider sx={{ mt: 2 }} />}
                </Box>
              ))}
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Container>
  );
};

export default DashboardPage;
