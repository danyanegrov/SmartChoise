import React, { useState } from 'react';
import {
  Container,
  Typography,
  Paper,
  Box,
  IconButton,
  Grid,
  Card,
  CardContent,
  TextField,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Switch,
  FormControlLabel,
  Slider,
  Divider,
  Avatar,
  Chip,
  Alert,
  Tab,
  Tabs,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  ListItemSecondaryAction
} from '@mui/material';
import { 
  Person, 
  ArrowBack,
  Edit,
  Save,
  Settings,
  Palette,
  Security,
  Notifications,
  Download,
  Delete,
  Info
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '@/store/useAuthStore';
import { useUIStore } from '@/store/useUIStore';
import { useDecisionStore } from '@/store/useDecisionStore';
import { apiService } from '@/services/api';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

const TabPanel: React.FC<TabPanelProps> = ({ children, value, index }) => (
  <div hidden={value !== index}>
    {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
  </div>
);

const ProfilePage: React.FC = () => {
  const navigate = useNavigate();
  const { user, isDemo, setUser, logout } = useAuthStore();
  const { theme, setTheme, addToast } = useUIStore();
  const { decisions } = useDecisionStore();

  const [tabValue, setTabValue] = useState(0);
  const [editing, setEditing] = useState(false);
  const [saving, setSaving] = useState(false);
  
  // Profile form state
  const [profileForm, setProfileForm] = useState({
    name: user?.name || '',
    age: user?.age || '',
    personalityType: user?.personalityType || '',
    anxietyLevel: user?.anxietyLevel || 5,
    preferences: {
      data: true,
      intuition: true,
      speed: false,
      consultation: false
    }
  });

  // Theme settings
  const [themeSettings, setThemeSettings] = useState({
    mode: theme.mode,
    primaryColor: theme.primaryColor,
    borderRadius: theme.borderRadius,
    fontSize: theme.fontSize
  });

  // Notification settings
  const [notifications, setNotifications] = useState({
    decisions: true,
    insights: true,
    reminders: false,
    updates: true
  });

  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleProfileSave = async () => {
    if (!user || isDemo) {
      // Demo mode - just update local state
      setUser({
        ...user!,
        name: profileForm.name,
        age: profileForm.age ? parseInt(profileForm.age.toString()) : undefined,
        personalityType: profileForm.personalityType as any,
        anxietyLevel: profileForm.anxietyLevel,
        preferences: profileForm.preferences
      });
      addToast({
        type: 'success',
        title: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
        message: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ'
      });
      setEditing(false);
      return;
    }

    setSaving(true);
    try {
      const updatedProfile = await apiService.updateProfile({
        name: profileForm.name,
        age: profileForm.age ? parseInt(profileForm.age.toString()) : undefined,
        personalityType: profileForm.personalityType as any,
        anxietyLevel: profileForm.anxietyLevel,
        preferences: profileForm.preferences
      });
      
      setUser(updatedProfile.user);
      addToast({
        type: 'success',
        title: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
        message: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
      });
      setEditing(false);
    } catch (error) {
      addToast({
        type: 'error',
        title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'
      });
    } finally {
      setSaving(false);
    }
  };

  const handleThemeChange = (key: string, value: any) => {
    const newTheme = { ...themeSettings, [key]: value };
    setThemeSettings(newTheme);
    setTheme(newTheme);
  };

  const exportData = () => {
    const exportData = {
      profile: user,
      decisions: decisions,
      preferences: profileForm.preferences,
      exportDate: new Date().toISOString()
    };
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `smartchoice-data-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    addToast({
      type: 'success',
      title: '–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã',
      message: '–§–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω'
    });
  };

  const deleteAllData = () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      localStorage.clear();
      addToast({
        type: 'info',
        title: '–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã',
        message: '–í—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã'
      });
      logout();
    }
  };

  return (
    <Container maxWidth="md" sx={{ py: 4 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
        <IconButton onClick={() => navigate('/')} sx={{ mr: 2 }}>
          <ArrowBack />
        </IconButton>
        <Box sx={{ flexGrow: 1 }}>
          <Typography variant="h4" gutterBottom>
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
          </Typography>
          <Typography variant="body2" color="text.secondary">
            {isDemo ? '–î–µ–º–æ —Ä–µ–∂–∏–º - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ' : '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤–∞—à –æ–ø—ã—Ç'}
          </Typography>
        </Box>
      </Box>

      {/* Profile Header */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Avatar 
              sx={{ 
                width: 80, 
                height: 80, 
                mr: 3,
                bgcolor: 'primary.main',
                fontSize: '2rem'
              }}
            >
              {user?.name ? user.name[0].toUpperCase() : 'üë§'}
            </Avatar>
            <Box sx={{ flexGrow: 1 }}>
              <Typography variant="h5" gutterBottom>
                {user?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
              </Typography>
              <Typography variant="body2" color="text.secondary" gutterBottom>
                {user?.email}
              </Typography>
              <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                {isDemo && <Chip label="–î–µ–º–æ —Ä–µ–∂–∏–º" color="warning" size="small" />}
                {user?.personalityType && (
                  <Chip 
                    label={user.personalityType === 'introvert' ? '–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç' : 
                           user.personalityType === 'extrovert' ? '–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç' : '–ê–º–±–∏–≤–µ—Ä—Ç'} 
                    size="small" 
                  />
                )}
                <Chip label={`${decisions.length} —Ä–µ—à–µ–Ω–∏–π`} size="small" />
              </Box>
            </Box>
          </Box>
        </CardContent>
      </Card>

      {/* Tabs */}
      <Paper sx={{ mb: 3 }}>
        <Tabs value={tabValue} onChange={handleTabChange} variant="scrollable">
          <Tab icon={<Person />} label="–ü—Ä–æ—Ñ–∏–ª—å" />
          <Tab icon={<Palette />} label="–¢–µ–º–∞" />
          <Tab icon={<Notifications />} label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" />
          <Tab icon={<Security />} label="–î–∞–Ω–Ω—ã–µ" />
        </Tabs>

        {/* Profile Tab */}
        <TabPanel value={tabValue} index={0}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
            <Typography variant="h6">
              –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </Typography>
            <Button
              startIcon={editing ? <Save /> : <Edit />}
              onClick={editing ? handleProfileSave : () => setEditing(true)}
              disabled={saving}
              variant={editing ? 'contained' : 'outlined'}
            >
              {editing ? (saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å') : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
            </Button>
          </Box>

          <Grid container spacing={3}>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="–ò–º—è"
                value={profileForm.name}
                onChange={(e) => setProfileForm(prev => ({ ...prev, name: e.target.value }))}
                disabled={!editing}
              />
            </Grid>
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="–í–æ–∑—Ä–∞—Å—Ç"
                type="number"
                value={profileForm.age}
                onChange={(e) => setProfileForm(prev => ({ ...prev, age: e.target.value }))}
                disabled={!editing}
              />
            </Grid>
            <Grid item xs={12}>
              <FormControl fullWidth disabled={!editing}>
                <InputLabel>–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏</InputLabel>
                <Select
                  value={profileForm.personalityType}
                  onChange={(e) => setProfileForm(prev => ({ ...prev, personalityType: e.target.value }))}
                  label="–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏"
                >
                  <MenuItem value="">–ù–µ —É–∫–∞–∑–∞–Ω</MenuItem>
                  <MenuItem value="introvert">–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç</MenuItem>
                  <MenuItem value="extrovert">–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç</MenuItem>
                  <MenuItem value="ambivert">–ê–º–±–∏–≤–µ—Ä—Ç</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12}>
              <Typography gutterBottom>
                –£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏: {profileForm.anxietyLevel}
              </Typography>
              <Slider
                value={profileForm.anxietyLevel}
                onChange={(_, value) => setProfileForm(prev => ({ ...prev, anxietyLevel: value as number }))}
                min={1}
                max={10}
                marks
                valueLabelDisplay="auto"
                disabled={!editing}
              />
            </Grid>
          </Grid>

          <Divider sx={{ my: 3 }} />

          <Typography variant="h6" gutterBottom>
            –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π
          </Typography>
          <Grid container spacing={2}>
            {[
              { key: 'data', label: '–û–ø–∏—Ä–∞—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–µ', description: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é' },
              { key: 'intuition', label: '–î–æ–≤–µ—Ä—è—Ç—å –∏–Ω—Ç—É–∏—Ü–∏–∏', description: '–£—á–∏—Ç—ã–≤–∞–µ—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—â—É—â–µ–Ω–∏—è' },
              { key: 'speed', label: '–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è', description: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –Ω–µ –∑–∞—Ç—è–≥–∏–≤–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º' },
              { key: 'consultation', label: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', description: '–õ—é–±–∏—Ç–µ –æ–±—Å—É–∂–¥–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏' }
            ].map((pref) => (
              <Grid item xs={12} sm={6} key={pref.key}>
                <FormControlLabel
                  control={
                    <Switch
                      checked={profileForm.preferences[pref.key as keyof typeof profileForm.preferences]}
                      onChange={(e) => setProfileForm(prev => ({
                        ...prev,
                        preferences: { ...prev.preferences, [pref.key]: e.target.checked }
                      }))}
                      disabled={!editing}
                    />
                  }
                  label={
                    <Box>
                      <Typography variant="body2">{pref.label}</Typography>
                      <Typography variant="caption" color="text.secondary">
                        {pref.description}
                      </Typography>
                    </Box>
                  }
                />
              </Grid>
            ))}
          </Grid>
        </TabPanel>

        {/* Theme Tab */}
        <TabPanel value={tabValue} index={1}>
          <Typography variant="h6" gutterBottom>
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
          </Typography>
          
          <Grid container spacing={3}>
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth>
                <InputLabel>–¢–µ–º–∞</InputLabel>
                <Select
                  value={themeSettings.mode}
                  onChange={(e) => handleThemeChange('mode', e.target.value)}
                  label="–¢–µ–º–∞"
                >
                  <MenuItem value="light">–°–≤–µ—Ç–ª–∞—è</MenuItem>
                  <MenuItem value="dark">–¢–µ–º–Ω–∞—è</MenuItem>
                  <MenuItem value="auto">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6}>
              <FormControl fullWidth>
                <InputLabel>–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞</InputLabel>
                <Select
                  value={themeSettings.fontSize}
                  onChange={(e) => handleThemeChange('fontSize', e.target.value)}
                  label="–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞"
                >
                  <MenuItem value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</MenuItem>
                  <MenuItem value="medium">–°—Ä–µ–¥–Ω–∏–π</MenuItem>
                  <MenuItem value="large">–ë–æ–ª—å—à–æ–π</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12}>
              <Typography gutterBottom>
                –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤: {themeSettings.borderRadius}px
              </Typography>
              <Slider
                value={themeSettings.borderRadius}
                onChange={(_, value) => handleThemeChange('borderRadius', value)}
                min={0}
                max={20}
                valueLabelDisplay="auto"
              />
            </Grid>
          </Grid>
        </TabPanel>

        {/* Notifications Tab */}
        <TabPanel value={tabValue} index={2}>
          <Typography variant="h6" gutterBottom>
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          </Typography>
          
          <List>
            {[
              { key: 'decisions', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—à–µ–Ω–∏—è—Ö', description: '–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏–π' },
              { key: 'insights', label: '–ò–ò –∏–Ω—Å–∞–π—Ç—ã', description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑' },
              { key: 'reminders', label: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', description: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö' },
              { key: 'updates', label: '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è', description: '–ù–æ–≤–æ—Å—Ç–∏ –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö' }
            ].map((setting) => (
              <ListItem key={setting.key}>
                <ListItemIcon>
                  <Notifications />
                </ListItemIcon>
                <ListItemText
                  primary={setting.label}
                  secondary={setting.description}
                />
                <ListItemSecondaryAction>
                  <Switch
                    checked={notifications[setting.key as keyof typeof notifications]}
                    onChange={(e) => setNotifications(prev => ({ ...prev, [setting.key]: e.target.checked }))}
                  />
                </ListItemSecondaryAction>
              </ListItem>
            ))}
          </List>
        </TabPanel>

        {/* Data Tab */}
        <TabPanel value={tabValue} index={3}>
          <Typography variant="h6" gutterBottom>
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
          </Typography>
          
          <Alert severity="info" sx={{ mb: 3 }}>
            <strong>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</strong> {decisions.length} —Ä–µ—à–µ–Ω–∏–π, —Å–æ–∑–¥–∞–Ω {new Date(user?.createdAt || '').toLocaleDateString('ru-RU')}
          </Alert>

          <List>
            <ListItem>
              <ListItemIcon>
                <Download />
              </ListItemIcon>
              <ListItemText
                primary="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
                secondary="–°–∫–∞—á–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"
              />
              <ListItemSecondaryAction>
                <Button variant="outlined" onClick={exportData}>
                  –°–∫–∞—á–∞—Ç—å
                </Button>
              </ListItemSecondaryAction>
            </ListItem>
            
            <ListItem>
              <ListItemIcon>
                <Info />
              </ListItemIcon>
              <ListItemText
                primary="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
                secondary="–ö–∞–∫ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ"
              />
              <ListItemSecondaryAction>
                <Button variant="outlined">
                  –ß–∏—Ç–∞—Ç—å
                </Button>
              </ListItemSecondaryAction>
            </ListItem>
            
            <Divider />
            
            <ListItem>
              <ListItemIcon>
                <Delete color="error" />
              </ListItemIcon>
              <ListItemText
                primary="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
                secondary="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ"
              />
              <ListItemSecondaryAction>
                <Button 
                  variant="outlined" 
                  color="error"
                  onClick={deleteAllData}
                >
                  –£–¥–∞–ª–∏—Ç—å
                </Button>
              </ListItemSecondaryAction>
            </ListItem>
          </List>
        </TabPanel>
      </Paper>
    </Container>
  );
};

export default ProfilePage;
