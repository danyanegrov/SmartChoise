# –°–æ–∑–¥–∞–µ–º Streamlit —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥

# frontend/requirements.txt
frontend_requirements = """streamlit==1.28.1
requests==2.31.0
plotly==5.17.0
pandas==2.0.3
altair==5.1.2
"""

# frontend/app.py
frontend_app_content = '''import streamlit as st
import requests
import json
import pandas as pd
import plotly.express as px
from datetime import datetime
import time

# Configuration
API_BASE_URL = "http://localhost:8000/api/v1"

# Page configuration
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞",
    page_icon="ü§î",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
.main-header {
    font-size: 2.5rem;
    color: #1f77b4;
    text-align: center;
    margin-bottom: 2rem;
}

.recommendation-card {
    border: 1px solid #ddd;
    border-radius: 10px;
    padding: 1rem;
    margin: 0.5rem 0;
    background: #f9f9f9;
}

.score-badge {
    background: #28a745;
    color: white;
    padding: 0.2rem 0.5rem;
    border-radius: 15px;
    font-size: 0.8rem;
}

.intent-badge {
    background: #007bff;
    color: white;
    padding: 0.2rem 0.5rem;
    border-radius: 15px;
    font-size: 0.8rem;
}
</style>
""", unsafe_allow_html=True)

def check_api_health():
    """Check if API is available"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False

def process_nlp(text):
    """Process text with NLP API"""
    try:
        response = requests.post(
            f"{API_BASE_URL}/nlp/process",
            json={"text": text, "user_context": {}},
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {str(e)}")
        return None

def get_recommendations(query, filters=None, limit=10):
    """Get recommendations from API"""
    try:
        payload = {
            "query": query,
            "filters": filters or {},
            "limit": limit
        }
        
        response = requests.post(
            f"{API_BASE_URL}/recommendations",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {str(e)}")
        return None

def submit_feedback(query_id, rating, feedback_text=""):
    """Submit feedback to API"""
    try:
        payload = {
            "query_id": query_id,
            "rating": rating,
            "feedback_text": feedback_text
        }
        
        response = requests.post(
            f"{API_BASE_URL}/recommendations/feedback",
            json=payload,
            timeout=10
        )
        
        return response.status_code == 200
    except:
        return False

def search_items(search_query="", category_id=None, min_price=None, max_price=None, limit=20):
    """Search items via API"""
    try:
        params = {"limit": limit, "offset": 0}
        
        if search_query:
            params["search"] = search_query
        if category_id:
            params["category_id"] = category_id
        if min_price:
            params["min_price"] = min_price
        if max_price:
            params["max_price"] = max_price
            
        response = requests.get(f"{API_BASE_URL}/items", params=params, timeout=10)
        
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def display_recommendation_card(rec, index):
    """Display a recommendation card"""
    with st.container():
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            st.markdown(f"**{rec.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')}**")
            if rec.get('price'):
                st.write(f"üí∞ {rec['price']:,.0f} ‚ÇΩ")
            if rec.get('rating'):
                st.write(f"‚≠ê {rec['rating']:.1f}/5.0")
        
        with col2:
            score = rec.get('final_score', rec.get('similarity_score', 0))
            st.markdown(f'<span class="score-badge">{score:.0%}</span>', 
                       unsafe_allow_html=True)
        
        with col3:
            # Feedback buttons
            col_like, col_dislike = st.columns(2)
            with col_like:
                if st.button("üëç", key=f"like_{index}"):
                    st.session_state[f'feedback_{index}'] = "like"
                    st.rerun()
            with col_dislike:
                if st.button("üëé", key=f"dislike_{index}"):
                    st.session_state[f'feedback_{index}'] = "dislike"
                    st.rerun()
        
        # Explanation
        if rec.get('explanation'):
            st.write(f"üí° {rec['explanation']}")
        
        # Show feedback if given
        feedback_key = f'feedback_{index}'
        if feedback_key in st.session_state:
            feedback = st.session_state[feedback_key]
            if feedback == "like":
                st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É!")
            elif feedback == "dislike":
                st.info("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –º—ã —É—á—Ç–µ–º —ç—Ç–æ.")

def main():
    """Main application"""
    
    # Header
    st.markdown('<h1 class="main-header">ü§î –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞</h1>', 
                unsafe_allow_html=True)
    
    # Check API health
    if not check_api_health():
        st.error("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        st.stop()
    else:
        st.success("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # Sidebar with filters
    with st.sidebar:
        st.header("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # Price range
        price_range = st.slider(
            "–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (‚ÇΩ)",
            min_value=0,
            max_value=5000000,
            value=(0, 500000),
            step=10000,
            format="%d"
        )
        
        # Category selection
        category_options = {
            "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏": None,
            "–ù–æ—É—Ç–±—É–∫–∏": 2,
            "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã": 3,
            "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏": 4,
            "–ö–Ω–∏–≥–∏": 7
        }
        
        selected_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", list(category_options.keys()))
        category_id = category_options[selected_category]
        
        # Number of results
        limit = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 5, 20, 10)
    
    # Main content area
    tab1, tab2, tab3 = st.tabs(["üîç –ü–æ–∏—Å–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ"])
    
    with tab1:
        st.header("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä")
        
        # Query input
        query = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É –∫—É–ø–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –Ω–æ—É—Ç–±—É–∫ –¥–æ 100000 —Ä—É–±–ª–µ–π –¥–ª—è CS:GO",
            height=100,
            help="–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ, –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –±—é–¥–∂–µ—Ç"
        )
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            search_button = st.button("üîç –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", type="primary")
        
        with col2:
            if st.button("üß™ NLP –∞–Ω–∞–ª–∏–∑"):
                if query:
                    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å..."):
                        nlp_result = process_nlp(query)
                        if nlp_result:
                            st.json(nlp_result)
        
        # Process recommendations
        if search_button and query:
            with st.spinner("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
                
                # Prepare filters
                filters = {
                    "min_price": price_range[0] if price_range[0] > 0 else None,
                    "max_price": price_range[1] if price_range[1] < 5000000 else None
                }
                
                if category_id:
                    filters["category_id"] = category_id
                
                # Get recommendations
                recommendations = get_recommendations(query, filters, limit)
                
                if recommendations:
                    st.session_state['last_recommendations'] = recommendations
                    
                    # Display results summary
                    st.success(f"‚úÖ {recommendations['explanation']}")
                    
                    # Show intent and processing time
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        intent = recommendations.get('intent', 'unknown')
                        st.markdown(f'–ù–∞–º–µ—Ä–µ–Ω–∏–µ: <span class="intent-badge">{intent}</span>', 
                                   unsafe_allow_html=True)
                    
                    with col2:
                        confidence = recommendations.get('intent_confidence', 0)
                        st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{confidence:.0%}")
                    
                    with col3:
                        time_ms = recommendations.get('processing_time_ms', 0)
                        st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{time_ms}–º—Å")
                    
                    # Display recommendations
                    st.header("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                    
                    recs = recommendations.get('recommendations', [])
                    if recs:
                        for i, rec in enumerate(recs):
                            with st.expander(f"{i+1}. {rec.get('name', '–¢–æ–≤–∞—Ä')}", 
                                           expanded=i < 3):
                                display_recommendation_card(rec, i)
                    else:
                        st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.")
                        
                        # Show alternative search
                        st.subheader("üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫")
                        alt_results = search_items(
                            search_query=query,
                            category_id=category_id,
                            min_price=filters.get('min_price'),
                            max_price=filters.get('max_price'),
                            limit=limit
                        )
                        
                        if alt_results and alt_results.get('items'):
                            st.info(f"–ù–∞–π–¥–µ–Ω–æ {len(alt_results['items'])} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –æ–±—ã—á–Ω–æ–º—É –ø–æ–∏—Å–∫—É:")
                            
                            for item in alt_results['items'][:5]:
                                st.write(f"‚Ä¢ **{item['name']}** - {item['price']:,.0f} ‚ÇΩ")
    
    with tab2:
        st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        try:
            # Get analytics from API
            response = requests.get(f"{API_BASE_URL}/analytics/stats", timeout=10)
            
            if response.status_code == 200:
                stats = response.json()
                
                # Display metrics
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", stats.get('users', 0))
                
                with col2:
                    st.metric("–¢–æ–≤–∞—Ä—ã", stats.get('items', 0))
                
                with col3:
                    st.metric("–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è", stats.get('interactions', 0))
                
                with col4:
                    st.metric("–ó–∞–ø—Ä–æ—Å—ã", stats.get('queries', 0))
                
                # Vector DB stats
                if stats.get('vector_db'):
                    st.subheader("–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
                    vec_stats = stats['vector_db']
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("–í–µ–∫—Ç–æ—Ä—ã", vec_stats.get('row_count', 0))
                    with col2:
                        indexed = vec_stats.get('indexed', False)
                        st.metric("–ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞", "‚úÖ" if indexed else "‚ùå")
            
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
    
    with tab3:
        st.header("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
        
        st.markdown("""
        ### –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        
        –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π:
        
        **üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (NLP)**
        - –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∏ —Å—É—â–Ω–æ—Å—Ç–µ–π
        - –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏
        
        **ü§ñ –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π**
        - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        - –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        - –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞—Ç—Ä–∏–±—É—Ç–∞–º —Ç–æ–≤–∞—Ä–æ–≤
        
        **üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏**
        - FastAPI –¥–ª—è backend API
        - PostgreSQL –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        - Milvus –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        - Streamlit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
        **üìä –ê–ª–≥–æ—Ä–∏—Ç–º –≥–∏–±—Ä–∏–¥–∏–∑–∞—Ü–∏–∏**
        - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: 40%
        - –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: 35%
        - –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: 25%
        
        ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        
        1. –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö (—Ü–µ–Ω–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
        3. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
        4. –û—Ü–µ–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """)
        
        # System status
        st.subheader("üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        status_data = []
        
        # Check API
        api_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if check_api_health() else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        status_data.append(["API —Å–µ—Ä–≤–µ—Ä", api_status])
        
        # Check services via health endpoint
        try:
            response = requests.get(f"{API_BASE_URL}/health", timeout=5)
            if response.status_code == 200:
                health = response.json()
                services = health.get('services', {})
                
                for service, status in services.items():
                    status_text = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if status else "üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
                    status_data.append([service.title(), status_text])
        except:
            status_data.append(["–°–µ—Ä–≤–∏—Å—ã", "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã"])
        
        # Display status table
        df_status = pd.DataFrame(status_data, columns=["–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", "–°—Ç–∞—Ç—É—Å"])
        st.table(df_status)
        
    # Footer
    st.markdown("---")
    st.markdown("*–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ v1.0 | Powered by AI*")

if __name__ == "__main__":
    main()
'''

# –°–æ–∑–¥–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ñ–∞–π–ª—ã
os.makedirs("frontend", exist_ok=True)

with open("frontend/requirements.txt", "w", encoding="utf-8") as f:
    f.write(frontend_requirements)

with open("frontend/app.py", "w", encoding="utf-8") as f:
    f.write(frontend_app_content)

print("‚úÖ Streamlit —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–æ–∑–¥–∞–Ω:")
print("- frontend/requirements.txt")
print("- frontend/app.py")