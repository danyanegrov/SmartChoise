// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  passwordHash    String?   @map("password_hash")
  name            String?
  age             Int?
  personalityType String?   @map("personality_type")
  anxietyLevel    Int?      @map("anxiety_level")
  provider        String? // google, facebook, email
  providerId      String?   @map("provider_id")
  isEmailVerified Boolean   @default(false) @map("is_email_verified")
  lastLoginAt     DateTime? @map("last_login_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  decisions      Decision[]
  behaviors      UserBehavior[]
  algorithmPerfs AlgorithmPerformance[]
  sessions       UserSession[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Decision {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  decisionType    String   @map("decision_type")
  title           String
  description     String?
  chosenOption    String?  @map("chosen_option")
  confidenceScore Float?   @map("confidence_score")
  outcomeRating   Int?     @map("outcome_rating")
  contextData     String?  @map("context_data")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  options DecisionOption[]

  @@map("decisions")
}

model DecisionOption {
  id             String   @id @default(cuid())
  decisionId     String   @map("decision_id")
  optionText     String   @map("option_text")
  userRating     Int?     @map("user_rating")
  aiScore        Float?   @map("ai_score")
  criteriaScores String?  @map("criteria_scores")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  decision Decision @relation(fields: [decisionId], references: [id], onDelete: Cascade)

  @@map("decision_options")
}

model UserBehavior {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  sessionId      String   @map("session_id")
  actionType     String   @map("action_type")
  pageUrl        String?  @map("page_url")
  elementClicked String?  @map("element_clicked")
  timeSpent      Int?     @map("time_spent") // в секундах
  hesitationTime Int?     @map("hesitation_time") // время до принятия решения
  metadata       String?
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_behavior")
}

model AlgorithmPerformance {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  algorithmType    String   @map("algorithm_type")
  inputData        String   @map("input_data")
  outputData       String   @map("output_data")
  userSatisfaction Int?     @map("user_satisfaction")
  processingTime   Int      @map("processing_time") // в миллисекундах
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("algorithm_performance")
}

// Enum не поддерживается в SQLite - используем String
// enum DecisionType {
//   simple
//   complex
//   random
// }
