
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserSession
 * 
 */
export type UserSession = $Result.DefaultSelection<Prisma.$UserSessionPayload>
/**
 * Model Decision
 * 
 */
export type Decision = $Result.DefaultSelection<Prisma.$DecisionPayload>
/**
 * Model DecisionOption
 * 
 */
export type DecisionOption = $Result.DefaultSelection<Prisma.$DecisionOptionPayload>
/**
 * Model UserBehavior
 * 
 */
export type UserBehavior = $Result.DefaultSelection<Prisma.$UserBehaviorPayload>
/**
 * Model AlgorithmPerformance
 * 
 */
export type AlgorithmPerformance = $Result.DefaultSelection<Prisma.$AlgorithmPerformancePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userSession`: Exposes CRUD operations for the **UserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSession.findMany()
    * ```
    */
  get userSession(): Prisma.UserSessionDelegate<ExtArgs>;

  /**
   * `prisma.decision`: Exposes CRUD operations for the **Decision** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Decisions
    * const decisions = await prisma.decision.findMany()
    * ```
    */
  get decision(): Prisma.DecisionDelegate<ExtArgs>;

  /**
   * `prisma.decisionOption`: Exposes CRUD operations for the **DecisionOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DecisionOptions
    * const decisionOptions = await prisma.decisionOption.findMany()
    * ```
    */
  get decisionOption(): Prisma.DecisionOptionDelegate<ExtArgs>;

  /**
   * `prisma.userBehavior`: Exposes CRUD operations for the **UserBehavior** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBehaviors
    * const userBehaviors = await prisma.userBehavior.findMany()
    * ```
    */
  get userBehavior(): Prisma.UserBehaviorDelegate<ExtArgs>;

  /**
   * `prisma.algorithmPerformance`: Exposes CRUD operations for the **AlgorithmPerformance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AlgorithmPerformances
    * const algorithmPerformances = await prisma.algorithmPerformance.findMany()
    * ```
    */
  get algorithmPerformance(): Prisma.AlgorithmPerformanceDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserSession: 'UserSession',
    Decision: 'Decision',
    DecisionOption: 'DecisionOption',
    UserBehavior: 'UserBehavior',
    AlgorithmPerformance: 'AlgorithmPerformance'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "userSession" | "decision" | "decisionOption" | "userBehavior" | "algorithmPerformance"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserSession: {
        payload: Prisma.$UserSessionPayload<ExtArgs>
        fields: Prisma.UserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findFirst: {
            args: Prisma.UserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findMany: {
            args: Prisma.UserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          create: {
            args: Prisma.UserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          createMany: {
            args: Prisma.UserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          delete: {
            args: Prisma.UserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          update: {
            args: Prisma.UserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          aggregate: {
            args: Prisma.UserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSession>
          }
          groupBy: {
            args: Prisma.UserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSessionCountAggregateOutputType> | number
          }
        }
      }
      Decision: {
        payload: Prisma.$DecisionPayload<ExtArgs>
        fields: Prisma.DecisionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DecisionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DecisionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionPayload>
          }
          findFirst: {
            args: Prisma.DecisionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DecisionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionPayload>
          }
          findMany: {
            args: Prisma.DecisionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionPayload>[]
          }
          create: {
            args: Prisma.DecisionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionPayload>
          }
          createMany: {
            args: Prisma.DecisionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DecisionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionPayload>[]
          }
          delete: {
            args: Prisma.DecisionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionPayload>
          }
          update: {
            args: Prisma.DecisionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionPayload>
          }
          deleteMany: {
            args: Prisma.DecisionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DecisionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DecisionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionPayload>
          }
          aggregate: {
            args: Prisma.DecisionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDecision>
          }
          groupBy: {
            args: Prisma.DecisionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DecisionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DecisionCountArgs<ExtArgs>
            result: $Utils.Optional<DecisionCountAggregateOutputType> | number
          }
        }
      }
      DecisionOption: {
        payload: Prisma.$DecisionOptionPayload<ExtArgs>
        fields: Prisma.DecisionOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DecisionOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DecisionOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionOptionPayload>
          }
          findFirst: {
            args: Prisma.DecisionOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DecisionOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionOptionPayload>
          }
          findMany: {
            args: Prisma.DecisionOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionOptionPayload>[]
          }
          create: {
            args: Prisma.DecisionOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionOptionPayload>
          }
          createMany: {
            args: Prisma.DecisionOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DecisionOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionOptionPayload>[]
          }
          delete: {
            args: Prisma.DecisionOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionOptionPayload>
          }
          update: {
            args: Prisma.DecisionOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionOptionPayload>
          }
          deleteMany: {
            args: Prisma.DecisionOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DecisionOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DecisionOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DecisionOptionPayload>
          }
          aggregate: {
            args: Prisma.DecisionOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDecisionOption>
          }
          groupBy: {
            args: Prisma.DecisionOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DecisionOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DecisionOptionCountArgs<ExtArgs>
            result: $Utils.Optional<DecisionOptionCountAggregateOutputType> | number
          }
        }
      }
      UserBehavior: {
        payload: Prisma.$UserBehaviorPayload<ExtArgs>
        fields: Prisma.UserBehaviorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserBehaviorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserBehaviorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>
          }
          findFirst: {
            args: Prisma.UserBehaviorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserBehaviorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>
          }
          findMany: {
            args: Prisma.UserBehaviorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>[]
          }
          create: {
            args: Prisma.UserBehaviorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>
          }
          createMany: {
            args: Prisma.UserBehaviorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserBehaviorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>[]
          }
          delete: {
            args: Prisma.UserBehaviorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>
          }
          update: {
            args: Prisma.UserBehaviorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>
          }
          deleteMany: {
            args: Prisma.UserBehaviorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserBehaviorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserBehaviorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBehaviorPayload>
          }
          aggregate: {
            args: Prisma.UserBehaviorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserBehavior>
          }
          groupBy: {
            args: Prisma.UserBehaviorGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserBehaviorGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserBehaviorCountArgs<ExtArgs>
            result: $Utils.Optional<UserBehaviorCountAggregateOutputType> | number
          }
        }
      }
      AlgorithmPerformance: {
        payload: Prisma.$AlgorithmPerformancePayload<ExtArgs>
        fields: Prisma.AlgorithmPerformanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlgorithmPerformanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlgorithmPerformancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlgorithmPerformanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlgorithmPerformancePayload>
          }
          findFirst: {
            args: Prisma.AlgorithmPerformanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlgorithmPerformancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlgorithmPerformanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlgorithmPerformancePayload>
          }
          findMany: {
            args: Prisma.AlgorithmPerformanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlgorithmPerformancePayload>[]
          }
          create: {
            args: Prisma.AlgorithmPerformanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlgorithmPerformancePayload>
          }
          createMany: {
            args: Prisma.AlgorithmPerformanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlgorithmPerformanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlgorithmPerformancePayload>[]
          }
          delete: {
            args: Prisma.AlgorithmPerformanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlgorithmPerformancePayload>
          }
          update: {
            args: Prisma.AlgorithmPerformanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlgorithmPerformancePayload>
          }
          deleteMany: {
            args: Prisma.AlgorithmPerformanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlgorithmPerformanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlgorithmPerformanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlgorithmPerformancePayload>
          }
          aggregate: {
            args: Prisma.AlgorithmPerformanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlgorithmPerformance>
          }
          groupBy: {
            args: Prisma.AlgorithmPerformanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlgorithmPerformanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlgorithmPerformanceCountArgs<ExtArgs>
            result: $Utils.Optional<AlgorithmPerformanceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    decisions: number
    behaviors: number
    algorithmPerfs: number
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    decisions?: boolean | UserCountOutputTypeCountDecisionsArgs
    behaviors?: boolean | UserCountOutputTypeCountBehaviorsArgs
    algorithmPerfs?: boolean | UserCountOutputTypeCountAlgorithmPerfsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDecisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DecisionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBehaviorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBehaviorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAlgorithmPerfsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlgorithmPerformanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
  }


  /**
   * Count Type DecisionCountOutputType
   */

  export type DecisionCountOutputType = {
    options: number
  }

  export type DecisionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | DecisionCountOutputTypeCountOptionsArgs
  }

  // Custom InputTypes
  /**
   * DecisionCountOutputType without action
   */
  export type DecisionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionCountOutputType
     */
    select?: DecisionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DecisionCountOutputType without action
   */
  export type DecisionCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DecisionOptionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    age: number | null
    anxietyLevel: number | null
  }

  export type UserSumAggregateOutputType = {
    age: number | null
    anxietyLevel: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    name: string | null
    age: number | null
    personalityType: string | null
    anxietyLevel: number | null
    provider: string | null
    providerId: string | null
    isEmailVerified: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    name: string | null
    age: number | null
    personalityType: string | null
    anxietyLevel: number | null
    provider: string | null
    providerId: string | null
    isEmailVerified: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    name: number
    age: number
    personalityType: number
    anxietyLevel: number
    provider: number
    providerId: number
    isEmailVerified: number
    lastLoginAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    age?: true
    anxietyLevel?: true
  }

  export type UserSumAggregateInputType = {
    age?: true
    anxietyLevel?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    age?: true
    personalityType?: true
    anxietyLevel?: true
    provider?: true
    providerId?: true
    isEmailVerified?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    age?: true
    personalityType?: true
    anxietyLevel?: true
    provider?: true
    providerId?: true
    isEmailVerified?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    age?: true
    personalityType?: true
    anxietyLevel?: true
    provider?: true
    providerId?: true
    isEmailVerified?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string | null
    name: string | null
    age: number | null
    personalityType: string | null
    anxietyLevel: number | null
    provider: string | null
    providerId: string | null
    isEmailVerified: boolean
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    age?: boolean
    personalityType?: boolean
    anxietyLevel?: boolean
    provider?: boolean
    providerId?: boolean
    isEmailVerified?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    decisions?: boolean | User$decisionsArgs<ExtArgs>
    behaviors?: boolean | User$behaviorsArgs<ExtArgs>
    algorithmPerfs?: boolean | User$algorithmPerfsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    age?: boolean
    personalityType?: boolean
    anxietyLevel?: boolean
    provider?: boolean
    providerId?: boolean
    isEmailVerified?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    age?: boolean
    personalityType?: boolean
    anxietyLevel?: boolean
    provider?: boolean
    providerId?: boolean
    isEmailVerified?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    decisions?: boolean | User$decisionsArgs<ExtArgs>
    behaviors?: boolean | User$behaviorsArgs<ExtArgs>
    algorithmPerfs?: boolean | User$algorithmPerfsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      decisions: Prisma.$DecisionPayload<ExtArgs>[]
      behaviors: Prisma.$UserBehaviorPayload<ExtArgs>[]
      algorithmPerfs: Prisma.$AlgorithmPerformancePayload<ExtArgs>[]
      sessions: Prisma.$UserSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string | null
      name: string | null
      age: number | null
      personalityType: string | null
      anxietyLevel: number | null
      provider: string | null
      providerId: string | null
      isEmailVerified: boolean
      lastLoginAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    decisions<T extends User$decisionsArgs<ExtArgs> = {}>(args?: Subset<T, User$decisionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DecisionPayload<ExtArgs>, T, "findMany"> | Null>
    behaviors<T extends User$behaviorsArgs<ExtArgs> = {}>(args?: Subset<T, User$behaviorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findMany"> | Null>
    algorithmPerfs<T extends User$algorithmPerfsArgs<ExtArgs> = {}>(args?: Subset<T, User$algorithmPerfsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlgorithmPerformancePayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly age: FieldRef<"User", 'Int'>
    readonly personalityType: FieldRef<"User", 'String'>
    readonly anxietyLevel: FieldRef<"User", 'Int'>
    readonly provider: FieldRef<"User", 'String'>
    readonly providerId: FieldRef<"User", 'String'>
    readonly isEmailVerified: FieldRef<"User", 'Boolean'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.decisions
   */
  export type User$decisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Decision
     */
    select?: DecisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionInclude<ExtArgs> | null
    where?: DecisionWhereInput
    orderBy?: DecisionOrderByWithRelationInput | DecisionOrderByWithRelationInput[]
    cursor?: DecisionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DecisionScalarFieldEnum | DecisionScalarFieldEnum[]
  }

  /**
   * User.behaviors
   */
  export type User$behaviorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    where?: UserBehaviorWhereInput
    orderBy?: UserBehaviorOrderByWithRelationInput | UserBehaviorOrderByWithRelationInput[]
    cursor?: UserBehaviorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBehaviorScalarFieldEnum | UserBehaviorScalarFieldEnum[]
  }

  /**
   * User.algorithmPerfs
   */
  export type User$algorithmPerfsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlgorithmPerformance
     */
    select?: AlgorithmPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlgorithmPerformanceInclude<ExtArgs> | null
    where?: AlgorithmPerformanceWhereInput
    orderBy?: AlgorithmPerformanceOrderByWithRelationInput | AlgorithmPerformanceOrderByWithRelationInput[]
    cursor?: AlgorithmPerformanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlgorithmPerformanceScalarFieldEnum | AlgorithmPerformanceScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    cursor?: UserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserSession
   */

  export type AggregateUserSession = {
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  export type UserSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type UserSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type UserSessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type UserSessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type UserSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type UserSessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type UserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSession to aggregate.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionMaxAggregateInputType
  }

  export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSession[P]>
      : GetScalarType<T[P], AggregateUserSession[P]>
  }




  export type UserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithAggregationInput | UserSessionOrderByWithAggregationInput[]
    by: UserSessionScalarFieldEnum[] | UserSessionScalarFieldEnum
    having?: UserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionCountAggregateInputType | true
    _min?: UserSessionMinAggregateInputType
    _max?: UserSessionMaxAggregateInputType
  }

  export type UserSessionGroupByOutputType = {
    id: string
    userId: string
    token: string
    expiresAt: Date
    createdAt: Date
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type UserSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["userSession"]>
    composites: {}
  }

  type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = $Result.GetResult<Prisma.$UserSessionPayload, S>

  type UserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserSessionCountAggregateInputType | true
    }

  export interface UserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
    /**
     * Find zero or one UserSession that matches the filter.
     * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSessionFindUniqueArgs>(args: SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSessionFindFirstArgs>(args?: SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSession.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSessionWithIdOnly = await prisma.userSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSessionFindManyArgs>(args?: SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserSession.
     * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
     * @example
     * // Create one UserSession
     * const UserSession = await prisma.userSession.create({
     *   data: {
     *     // ... data to create a UserSession
     *   }
     * })
     * 
     */
    create<T extends UserSessionCreateArgs>(args: SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserSessions.
     * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSessionCreateManyArgs>(args?: SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSessions and returns the data saved in the database.
     * @param {UserSessionCreateManyAndReturnArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserSession.
     * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
     * @example
     * // Delete one UserSession
     * const UserSession = await prisma.userSession.delete({
     *   where: {
     *     // ... filter to delete one UserSession
     *   }
     * })
     * 
     */
    delete<T extends UserSessionDeleteArgs>(args: SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserSession.
     * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
     * @example
     * // Update one UserSession
     * const userSession = await prisma.userSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSessionUpdateArgs>(args: SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSessionDeleteManyArgs>(args?: SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSessionUpdateManyArgs>(args: SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSession.
     * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
     * @example
     * // Update or create a UserSession
     * const userSession = await prisma.userSession.upsert({
     *   create: {
     *     // ... data to create a UserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSession we want to update
     *   }
     * })
     */
    upsert<T extends UserSessionUpsertArgs>(args: SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSession.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionCountArgs>(
      args?: Subset<T, UserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionAggregateArgs>(args: Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

    /**
     * Group by UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSession model
   */
  readonly fields: UserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSession model
   */ 
  interface UserSessionFieldRefs {
    readonly id: FieldRef<"UserSession", 'String'>
    readonly userId: FieldRef<"UserSession", 'String'>
    readonly token: FieldRef<"UserSession", 'String'>
    readonly expiresAt: FieldRef<"UserSession", 'DateTime'>
    readonly createdAt: FieldRef<"UserSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSession findUnique
   */
  export type UserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findUniqueOrThrow
   */
  export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findFirst
   */
  export type UserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findFirstOrThrow
   */
  export type UserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findMany
   */
  export type UserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession create
   */
  export type UserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSession.
     */
    data: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
  }

  /**
   * UserSession createMany
   */
  export type UserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
  }

  /**
   * UserSession createManyAndReturn
   */
  export type UserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession update
   */
  export type UserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSession.
     */
    data: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
    /**
     * Choose, which UserSession to update.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession updateMany
   */
  export type UserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
  }

  /**
   * UserSession upsert
   */
  export type UserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSession to update in case it exists.
     */
    where: UserSessionWhereUniqueInput
    /**
     * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
     */
    create: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
    /**
     * In case the UserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
  }

  /**
   * UserSession delete
   */
  export type UserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter which UserSession to delete.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession deleteMany
   */
  export type UserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionWhereInput
  }

  /**
   * UserSession without action
   */
  export type UserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
  }


  /**
   * Model Decision
   */

  export type AggregateDecision = {
    _count: DecisionCountAggregateOutputType | null
    _avg: DecisionAvgAggregateOutputType | null
    _sum: DecisionSumAggregateOutputType | null
    _min: DecisionMinAggregateOutputType | null
    _max: DecisionMaxAggregateOutputType | null
  }

  export type DecisionAvgAggregateOutputType = {
    confidenceScore: number | null
    outcomeRating: number | null
  }

  export type DecisionSumAggregateOutputType = {
    confidenceScore: number | null
    outcomeRating: number | null
  }

  export type DecisionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    decisionType: string | null
    title: string | null
    description: string | null
    chosenOption: string | null
    confidenceScore: number | null
    outcomeRating: number | null
    contextData: string | null
    createdAt: Date | null
  }

  export type DecisionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    decisionType: string | null
    title: string | null
    description: string | null
    chosenOption: string | null
    confidenceScore: number | null
    outcomeRating: number | null
    contextData: string | null
    createdAt: Date | null
  }

  export type DecisionCountAggregateOutputType = {
    id: number
    userId: number
    decisionType: number
    title: number
    description: number
    chosenOption: number
    confidenceScore: number
    outcomeRating: number
    contextData: number
    createdAt: number
    _all: number
  }


  export type DecisionAvgAggregateInputType = {
    confidenceScore?: true
    outcomeRating?: true
  }

  export type DecisionSumAggregateInputType = {
    confidenceScore?: true
    outcomeRating?: true
  }

  export type DecisionMinAggregateInputType = {
    id?: true
    userId?: true
    decisionType?: true
    title?: true
    description?: true
    chosenOption?: true
    confidenceScore?: true
    outcomeRating?: true
    contextData?: true
    createdAt?: true
  }

  export type DecisionMaxAggregateInputType = {
    id?: true
    userId?: true
    decisionType?: true
    title?: true
    description?: true
    chosenOption?: true
    confidenceScore?: true
    outcomeRating?: true
    contextData?: true
    createdAt?: true
  }

  export type DecisionCountAggregateInputType = {
    id?: true
    userId?: true
    decisionType?: true
    title?: true
    description?: true
    chosenOption?: true
    confidenceScore?: true
    outcomeRating?: true
    contextData?: true
    createdAt?: true
    _all?: true
  }

  export type DecisionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Decision to aggregate.
     */
    where?: DecisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Decisions to fetch.
     */
    orderBy?: DecisionOrderByWithRelationInput | DecisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DecisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Decisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Decisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Decisions
    **/
    _count?: true | DecisionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DecisionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DecisionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DecisionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DecisionMaxAggregateInputType
  }

  export type GetDecisionAggregateType<T extends DecisionAggregateArgs> = {
        [P in keyof T & keyof AggregateDecision]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDecision[P]>
      : GetScalarType<T[P], AggregateDecision[P]>
  }




  export type DecisionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DecisionWhereInput
    orderBy?: DecisionOrderByWithAggregationInput | DecisionOrderByWithAggregationInput[]
    by: DecisionScalarFieldEnum[] | DecisionScalarFieldEnum
    having?: DecisionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DecisionCountAggregateInputType | true
    _avg?: DecisionAvgAggregateInputType
    _sum?: DecisionSumAggregateInputType
    _min?: DecisionMinAggregateInputType
    _max?: DecisionMaxAggregateInputType
  }

  export type DecisionGroupByOutputType = {
    id: string
    userId: string
    decisionType: string
    title: string
    description: string | null
    chosenOption: string | null
    confidenceScore: number | null
    outcomeRating: number | null
    contextData: string | null
    createdAt: Date
    _count: DecisionCountAggregateOutputType | null
    _avg: DecisionAvgAggregateOutputType | null
    _sum: DecisionSumAggregateOutputType | null
    _min: DecisionMinAggregateOutputType | null
    _max: DecisionMaxAggregateOutputType | null
  }

  type GetDecisionGroupByPayload<T extends DecisionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DecisionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DecisionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DecisionGroupByOutputType[P]>
            : GetScalarType<T[P], DecisionGroupByOutputType[P]>
        }
      >
    >


  export type DecisionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    decisionType?: boolean
    title?: boolean
    description?: boolean
    chosenOption?: boolean
    confidenceScore?: boolean
    outcomeRating?: boolean
    contextData?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    options?: boolean | Decision$optionsArgs<ExtArgs>
    _count?: boolean | DecisionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["decision"]>

  export type DecisionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    decisionType?: boolean
    title?: boolean
    description?: boolean
    chosenOption?: boolean
    confidenceScore?: boolean
    outcomeRating?: boolean
    contextData?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["decision"]>

  export type DecisionSelectScalar = {
    id?: boolean
    userId?: boolean
    decisionType?: boolean
    title?: boolean
    description?: boolean
    chosenOption?: boolean
    confidenceScore?: boolean
    outcomeRating?: boolean
    contextData?: boolean
    createdAt?: boolean
  }

  export type DecisionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    options?: boolean | Decision$optionsArgs<ExtArgs>
    _count?: boolean | DecisionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DecisionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DecisionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Decision"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      options: Prisma.$DecisionOptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      decisionType: string
      title: string
      description: string | null
      chosenOption: string | null
      confidenceScore: number | null
      outcomeRating: number | null
      contextData: string | null
      createdAt: Date
    }, ExtArgs["result"]["decision"]>
    composites: {}
  }

  type DecisionGetPayload<S extends boolean | null | undefined | DecisionDefaultArgs> = $Result.GetResult<Prisma.$DecisionPayload, S>

  type DecisionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DecisionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DecisionCountAggregateInputType | true
    }

  export interface DecisionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Decision'], meta: { name: 'Decision' } }
    /**
     * Find zero or one Decision that matches the filter.
     * @param {DecisionFindUniqueArgs} args - Arguments to find a Decision
     * @example
     * // Get one Decision
     * const decision = await prisma.decision.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DecisionFindUniqueArgs>(args: SelectSubset<T, DecisionFindUniqueArgs<ExtArgs>>): Prisma__DecisionClient<$Result.GetResult<Prisma.$DecisionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Decision that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DecisionFindUniqueOrThrowArgs} args - Arguments to find a Decision
     * @example
     * // Get one Decision
     * const decision = await prisma.decision.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DecisionFindUniqueOrThrowArgs>(args: SelectSubset<T, DecisionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DecisionClient<$Result.GetResult<Prisma.$DecisionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Decision that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionFindFirstArgs} args - Arguments to find a Decision
     * @example
     * // Get one Decision
     * const decision = await prisma.decision.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DecisionFindFirstArgs>(args?: SelectSubset<T, DecisionFindFirstArgs<ExtArgs>>): Prisma__DecisionClient<$Result.GetResult<Prisma.$DecisionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Decision that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionFindFirstOrThrowArgs} args - Arguments to find a Decision
     * @example
     * // Get one Decision
     * const decision = await prisma.decision.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DecisionFindFirstOrThrowArgs>(args?: SelectSubset<T, DecisionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DecisionClient<$Result.GetResult<Prisma.$DecisionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Decisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Decisions
     * const decisions = await prisma.decision.findMany()
     * 
     * // Get first 10 Decisions
     * const decisions = await prisma.decision.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const decisionWithIdOnly = await prisma.decision.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DecisionFindManyArgs>(args?: SelectSubset<T, DecisionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DecisionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Decision.
     * @param {DecisionCreateArgs} args - Arguments to create a Decision.
     * @example
     * // Create one Decision
     * const Decision = await prisma.decision.create({
     *   data: {
     *     // ... data to create a Decision
     *   }
     * })
     * 
     */
    create<T extends DecisionCreateArgs>(args: SelectSubset<T, DecisionCreateArgs<ExtArgs>>): Prisma__DecisionClient<$Result.GetResult<Prisma.$DecisionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Decisions.
     * @param {DecisionCreateManyArgs} args - Arguments to create many Decisions.
     * @example
     * // Create many Decisions
     * const decision = await prisma.decision.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DecisionCreateManyArgs>(args?: SelectSubset<T, DecisionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Decisions and returns the data saved in the database.
     * @param {DecisionCreateManyAndReturnArgs} args - Arguments to create many Decisions.
     * @example
     * // Create many Decisions
     * const decision = await prisma.decision.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Decisions and only return the `id`
     * const decisionWithIdOnly = await prisma.decision.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DecisionCreateManyAndReturnArgs>(args?: SelectSubset<T, DecisionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DecisionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Decision.
     * @param {DecisionDeleteArgs} args - Arguments to delete one Decision.
     * @example
     * // Delete one Decision
     * const Decision = await prisma.decision.delete({
     *   where: {
     *     // ... filter to delete one Decision
     *   }
     * })
     * 
     */
    delete<T extends DecisionDeleteArgs>(args: SelectSubset<T, DecisionDeleteArgs<ExtArgs>>): Prisma__DecisionClient<$Result.GetResult<Prisma.$DecisionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Decision.
     * @param {DecisionUpdateArgs} args - Arguments to update one Decision.
     * @example
     * // Update one Decision
     * const decision = await prisma.decision.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DecisionUpdateArgs>(args: SelectSubset<T, DecisionUpdateArgs<ExtArgs>>): Prisma__DecisionClient<$Result.GetResult<Prisma.$DecisionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Decisions.
     * @param {DecisionDeleteManyArgs} args - Arguments to filter Decisions to delete.
     * @example
     * // Delete a few Decisions
     * const { count } = await prisma.decision.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DecisionDeleteManyArgs>(args?: SelectSubset<T, DecisionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Decisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Decisions
     * const decision = await prisma.decision.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DecisionUpdateManyArgs>(args: SelectSubset<T, DecisionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Decision.
     * @param {DecisionUpsertArgs} args - Arguments to update or create a Decision.
     * @example
     * // Update or create a Decision
     * const decision = await prisma.decision.upsert({
     *   create: {
     *     // ... data to create a Decision
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Decision we want to update
     *   }
     * })
     */
    upsert<T extends DecisionUpsertArgs>(args: SelectSubset<T, DecisionUpsertArgs<ExtArgs>>): Prisma__DecisionClient<$Result.GetResult<Prisma.$DecisionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Decisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionCountArgs} args - Arguments to filter Decisions to count.
     * @example
     * // Count the number of Decisions
     * const count = await prisma.decision.count({
     *   where: {
     *     // ... the filter for the Decisions we want to count
     *   }
     * })
    **/
    count<T extends DecisionCountArgs>(
      args?: Subset<T, DecisionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DecisionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Decision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DecisionAggregateArgs>(args: Subset<T, DecisionAggregateArgs>): Prisma.PrismaPromise<GetDecisionAggregateType<T>>

    /**
     * Group by Decision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DecisionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DecisionGroupByArgs['orderBy'] }
        : { orderBy?: DecisionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DecisionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDecisionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Decision model
   */
  readonly fields: DecisionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Decision.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DecisionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    options<T extends Decision$optionsArgs<ExtArgs> = {}>(args?: Subset<T, Decision$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DecisionOptionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Decision model
   */ 
  interface DecisionFieldRefs {
    readonly id: FieldRef<"Decision", 'String'>
    readonly userId: FieldRef<"Decision", 'String'>
    readonly decisionType: FieldRef<"Decision", 'String'>
    readonly title: FieldRef<"Decision", 'String'>
    readonly description: FieldRef<"Decision", 'String'>
    readonly chosenOption: FieldRef<"Decision", 'String'>
    readonly confidenceScore: FieldRef<"Decision", 'Float'>
    readonly outcomeRating: FieldRef<"Decision", 'Int'>
    readonly contextData: FieldRef<"Decision", 'String'>
    readonly createdAt: FieldRef<"Decision", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Decision findUnique
   */
  export type DecisionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Decision
     */
    select?: DecisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionInclude<ExtArgs> | null
    /**
     * Filter, which Decision to fetch.
     */
    where: DecisionWhereUniqueInput
  }

  /**
   * Decision findUniqueOrThrow
   */
  export type DecisionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Decision
     */
    select?: DecisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionInclude<ExtArgs> | null
    /**
     * Filter, which Decision to fetch.
     */
    where: DecisionWhereUniqueInput
  }

  /**
   * Decision findFirst
   */
  export type DecisionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Decision
     */
    select?: DecisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionInclude<ExtArgs> | null
    /**
     * Filter, which Decision to fetch.
     */
    where?: DecisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Decisions to fetch.
     */
    orderBy?: DecisionOrderByWithRelationInput | DecisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Decisions.
     */
    cursor?: DecisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Decisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Decisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Decisions.
     */
    distinct?: DecisionScalarFieldEnum | DecisionScalarFieldEnum[]
  }

  /**
   * Decision findFirstOrThrow
   */
  export type DecisionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Decision
     */
    select?: DecisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionInclude<ExtArgs> | null
    /**
     * Filter, which Decision to fetch.
     */
    where?: DecisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Decisions to fetch.
     */
    orderBy?: DecisionOrderByWithRelationInput | DecisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Decisions.
     */
    cursor?: DecisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Decisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Decisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Decisions.
     */
    distinct?: DecisionScalarFieldEnum | DecisionScalarFieldEnum[]
  }

  /**
   * Decision findMany
   */
  export type DecisionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Decision
     */
    select?: DecisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionInclude<ExtArgs> | null
    /**
     * Filter, which Decisions to fetch.
     */
    where?: DecisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Decisions to fetch.
     */
    orderBy?: DecisionOrderByWithRelationInput | DecisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Decisions.
     */
    cursor?: DecisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Decisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Decisions.
     */
    skip?: number
    distinct?: DecisionScalarFieldEnum | DecisionScalarFieldEnum[]
  }

  /**
   * Decision create
   */
  export type DecisionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Decision
     */
    select?: DecisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionInclude<ExtArgs> | null
    /**
     * The data needed to create a Decision.
     */
    data: XOR<DecisionCreateInput, DecisionUncheckedCreateInput>
  }

  /**
   * Decision createMany
   */
  export type DecisionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Decisions.
     */
    data: DecisionCreateManyInput | DecisionCreateManyInput[]
  }

  /**
   * Decision createManyAndReturn
   */
  export type DecisionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Decision
     */
    select?: DecisionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Decisions.
     */
    data: DecisionCreateManyInput | DecisionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Decision update
   */
  export type DecisionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Decision
     */
    select?: DecisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionInclude<ExtArgs> | null
    /**
     * The data needed to update a Decision.
     */
    data: XOR<DecisionUpdateInput, DecisionUncheckedUpdateInput>
    /**
     * Choose, which Decision to update.
     */
    where: DecisionWhereUniqueInput
  }

  /**
   * Decision updateMany
   */
  export type DecisionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Decisions.
     */
    data: XOR<DecisionUpdateManyMutationInput, DecisionUncheckedUpdateManyInput>
    /**
     * Filter which Decisions to update
     */
    where?: DecisionWhereInput
  }

  /**
   * Decision upsert
   */
  export type DecisionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Decision
     */
    select?: DecisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionInclude<ExtArgs> | null
    /**
     * The filter to search for the Decision to update in case it exists.
     */
    where: DecisionWhereUniqueInput
    /**
     * In case the Decision found by the `where` argument doesn't exist, create a new Decision with this data.
     */
    create: XOR<DecisionCreateInput, DecisionUncheckedCreateInput>
    /**
     * In case the Decision was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DecisionUpdateInput, DecisionUncheckedUpdateInput>
  }

  /**
   * Decision delete
   */
  export type DecisionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Decision
     */
    select?: DecisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionInclude<ExtArgs> | null
    /**
     * Filter which Decision to delete.
     */
    where: DecisionWhereUniqueInput
  }

  /**
   * Decision deleteMany
   */
  export type DecisionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Decisions to delete
     */
    where?: DecisionWhereInput
  }

  /**
   * Decision.options
   */
  export type Decision$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionOption
     */
    select?: DecisionOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionOptionInclude<ExtArgs> | null
    where?: DecisionOptionWhereInput
    orderBy?: DecisionOptionOrderByWithRelationInput | DecisionOptionOrderByWithRelationInput[]
    cursor?: DecisionOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DecisionOptionScalarFieldEnum | DecisionOptionScalarFieldEnum[]
  }

  /**
   * Decision without action
   */
  export type DecisionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Decision
     */
    select?: DecisionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionInclude<ExtArgs> | null
  }


  /**
   * Model DecisionOption
   */

  export type AggregateDecisionOption = {
    _count: DecisionOptionCountAggregateOutputType | null
    _avg: DecisionOptionAvgAggregateOutputType | null
    _sum: DecisionOptionSumAggregateOutputType | null
    _min: DecisionOptionMinAggregateOutputType | null
    _max: DecisionOptionMaxAggregateOutputType | null
  }

  export type DecisionOptionAvgAggregateOutputType = {
    userRating: number | null
    aiScore: number | null
  }

  export type DecisionOptionSumAggregateOutputType = {
    userRating: number | null
    aiScore: number | null
  }

  export type DecisionOptionMinAggregateOutputType = {
    id: string | null
    decisionId: string | null
    optionText: string | null
    userRating: number | null
    aiScore: number | null
    criteriaScores: string | null
    createdAt: Date | null
  }

  export type DecisionOptionMaxAggregateOutputType = {
    id: string | null
    decisionId: string | null
    optionText: string | null
    userRating: number | null
    aiScore: number | null
    criteriaScores: string | null
    createdAt: Date | null
  }

  export type DecisionOptionCountAggregateOutputType = {
    id: number
    decisionId: number
    optionText: number
    userRating: number
    aiScore: number
    criteriaScores: number
    createdAt: number
    _all: number
  }


  export type DecisionOptionAvgAggregateInputType = {
    userRating?: true
    aiScore?: true
  }

  export type DecisionOptionSumAggregateInputType = {
    userRating?: true
    aiScore?: true
  }

  export type DecisionOptionMinAggregateInputType = {
    id?: true
    decisionId?: true
    optionText?: true
    userRating?: true
    aiScore?: true
    criteriaScores?: true
    createdAt?: true
  }

  export type DecisionOptionMaxAggregateInputType = {
    id?: true
    decisionId?: true
    optionText?: true
    userRating?: true
    aiScore?: true
    criteriaScores?: true
    createdAt?: true
  }

  export type DecisionOptionCountAggregateInputType = {
    id?: true
    decisionId?: true
    optionText?: true
    userRating?: true
    aiScore?: true
    criteriaScores?: true
    createdAt?: true
    _all?: true
  }

  export type DecisionOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DecisionOption to aggregate.
     */
    where?: DecisionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DecisionOptions to fetch.
     */
    orderBy?: DecisionOptionOrderByWithRelationInput | DecisionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DecisionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DecisionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DecisionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DecisionOptions
    **/
    _count?: true | DecisionOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DecisionOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DecisionOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DecisionOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DecisionOptionMaxAggregateInputType
  }

  export type GetDecisionOptionAggregateType<T extends DecisionOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateDecisionOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDecisionOption[P]>
      : GetScalarType<T[P], AggregateDecisionOption[P]>
  }




  export type DecisionOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DecisionOptionWhereInput
    orderBy?: DecisionOptionOrderByWithAggregationInput | DecisionOptionOrderByWithAggregationInput[]
    by: DecisionOptionScalarFieldEnum[] | DecisionOptionScalarFieldEnum
    having?: DecisionOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DecisionOptionCountAggregateInputType | true
    _avg?: DecisionOptionAvgAggregateInputType
    _sum?: DecisionOptionSumAggregateInputType
    _min?: DecisionOptionMinAggregateInputType
    _max?: DecisionOptionMaxAggregateInputType
  }

  export type DecisionOptionGroupByOutputType = {
    id: string
    decisionId: string
    optionText: string
    userRating: number | null
    aiScore: number | null
    criteriaScores: string | null
    createdAt: Date
    _count: DecisionOptionCountAggregateOutputType | null
    _avg: DecisionOptionAvgAggregateOutputType | null
    _sum: DecisionOptionSumAggregateOutputType | null
    _min: DecisionOptionMinAggregateOutputType | null
    _max: DecisionOptionMaxAggregateOutputType | null
  }

  type GetDecisionOptionGroupByPayload<T extends DecisionOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DecisionOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DecisionOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DecisionOptionGroupByOutputType[P]>
            : GetScalarType<T[P], DecisionOptionGroupByOutputType[P]>
        }
      >
    >


  export type DecisionOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    decisionId?: boolean
    optionText?: boolean
    userRating?: boolean
    aiScore?: boolean
    criteriaScores?: boolean
    createdAt?: boolean
    decision?: boolean | DecisionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["decisionOption"]>

  export type DecisionOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    decisionId?: boolean
    optionText?: boolean
    userRating?: boolean
    aiScore?: boolean
    criteriaScores?: boolean
    createdAt?: boolean
    decision?: boolean | DecisionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["decisionOption"]>

  export type DecisionOptionSelectScalar = {
    id?: boolean
    decisionId?: boolean
    optionText?: boolean
    userRating?: boolean
    aiScore?: boolean
    criteriaScores?: boolean
    createdAt?: boolean
  }

  export type DecisionOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    decision?: boolean | DecisionDefaultArgs<ExtArgs>
  }
  export type DecisionOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    decision?: boolean | DecisionDefaultArgs<ExtArgs>
  }

  export type $DecisionOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DecisionOption"
    objects: {
      decision: Prisma.$DecisionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      decisionId: string
      optionText: string
      userRating: number | null
      aiScore: number | null
      criteriaScores: string | null
      createdAt: Date
    }, ExtArgs["result"]["decisionOption"]>
    composites: {}
  }

  type DecisionOptionGetPayload<S extends boolean | null | undefined | DecisionOptionDefaultArgs> = $Result.GetResult<Prisma.$DecisionOptionPayload, S>

  type DecisionOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DecisionOptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DecisionOptionCountAggregateInputType | true
    }

  export interface DecisionOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DecisionOption'], meta: { name: 'DecisionOption' } }
    /**
     * Find zero or one DecisionOption that matches the filter.
     * @param {DecisionOptionFindUniqueArgs} args - Arguments to find a DecisionOption
     * @example
     * // Get one DecisionOption
     * const decisionOption = await prisma.decisionOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DecisionOptionFindUniqueArgs>(args: SelectSubset<T, DecisionOptionFindUniqueArgs<ExtArgs>>): Prisma__DecisionOptionClient<$Result.GetResult<Prisma.$DecisionOptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DecisionOption that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DecisionOptionFindUniqueOrThrowArgs} args - Arguments to find a DecisionOption
     * @example
     * // Get one DecisionOption
     * const decisionOption = await prisma.decisionOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DecisionOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, DecisionOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DecisionOptionClient<$Result.GetResult<Prisma.$DecisionOptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DecisionOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionOptionFindFirstArgs} args - Arguments to find a DecisionOption
     * @example
     * // Get one DecisionOption
     * const decisionOption = await prisma.decisionOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DecisionOptionFindFirstArgs>(args?: SelectSubset<T, DecisionOptionFindFirstArgs<ExtArgs>>): Prisma__DecisionOptionClient<$Result.GetResult<Prisma.$DecisionOptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DecisionOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionOptionFindFirstOrThrowArgs} args - Arguments to find a DecisionOption
     * @example
     * // Get one DecisionOption
     * const decisionOption = await prisma.decisionOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DecisionOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, DecisionOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DecisionOptionClient<$Result.GetResult<Prisma.$DecisionOptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DecisionOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DecisionOptions
     * const decisionOptions = await prisma.decisionOption.findMany()
     * 
     * // Get first 10 DecisionOptions
     * const decisionOptions = await prisma.decisionOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const decisionOptionWithIdOnly = await prisma.decisionOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DecisionOptionFindManyArgs>(args?: SelectSubset<T, DecisionOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DecisionOptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DecisionOption.
     * @param {DecisionOptionCreateArgs} args - Arguments to create a DecisionOption.
     * @example
     * // Create one DecisionOption
     * const DecisionOption = await prisma.decisionOption.create({
     *   data: {
     *     // ... data to create a DecisionOption
     *   }
     * })
     * 
     */
    create<T extends DecisionOptionCreateArgs>(args: SelectSubset<T, DecisionOptionCreateArgs<ExtArgs>>): Prisma__DecisionOptionClient<$Result.GetResult<Prisma.$DecisionOptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DecisionOptions.
     * @param {DecisionOptionCreateManyArgs} args - Arguments to create many DecisionOptions.
     * @example
     * // Create many DecisionOptions
     * const decisionOption = await prisma.decisionOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DecisionOptionCreateManyArgs>(args?: SelectSubset<T, DecisionOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DecisionOptions and returns the data saved in the database.
     * @param {DecisionOptionCreateManyAndReturnArgs} args - Arguments to create many DecisionOptions.
     * @example
     * // Create many DecisionOptions
     * const decisionOption = await prisma.decisionOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DecisionOptions and only return the `id`
     * const decisionOptionWithIdOnly = await prisma.decisionOption.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DecisionOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, DecisionOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DecisionOptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DecisionOption.
     * @param {DecisionOptionDeleteArgs} args - Arguments to delete one DecisionOption.
     * @example
     * // Delete one DecisionOption
     * const DecisionOption = await prisma.decisionOption.delete({
     *   where: {
     *     // ... filter to delete one DecisionOption
     *   }
     * })
     * 
     */
    delete<T extends DecisionOptionDeleteArgs>(args: SelectSubset<T, DecisionOptionDeleteArgs<ExtArgs>>): Prisma__DecisionOptionClient<$Result.GetResult<Prisma.$DecisionOptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DecisionOption.
     * @param {DecisionOptionUpdateArgs} args - Arguments to update one DecisionOption.
     * @example
     * // Update one DecisionOption
     * const decisionOption = await prisma.decisionOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DecisionOptionUpdateArgs>(args: SelectSubset<T, DecisionOptionUpdateArgs<ExtArgs>>): Prisma__DecisionOptionClient<$Result.GetResult<Prisma.$DecisionOptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DecisionOptions.
     * @param {DecisionOptionDeleteManyArgs} args - Arguments to filter DecisionOptions to delete.
     * @example
     * // Delete a few DecisionOptions
     * const { count } = await prisma.decisionOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DecisionOptionDeleteManyArgs>(args?: SelectSubset<T, DecisionOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DecisionOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DecisionOptions
     * const decisionOption = await prisma.decisionOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DecisionOptionUpdateManyArgs>(args: SelectSubset<T, DecisionOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DecisionOption.
     * @param {DecisionOptionUpsertArgs} args - Arguments to update or create a DecisionOption.
     * @example
     * // Update or create a DecisionOption
     * const decisionOption = await prisma.decisionOption.upsert({
     *   create: {
     *     // ... data to create a DecisionOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DecisionOption we want to update
     *   }
     * })
     */
    upsert<T extends DecisionOptionUpsertArgs>(args: SelectSubset<T, DecisionOptionUpsertArgs<ExtArgs>>): Prisma__DecisionOptionClient<$Result.GetResult<Prisma.$DecisionOptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DecisionOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionOptionCountArgs} args - Arguments to filter DecisionOptions to count.
     * @example
     * // Count the number of DecisionOptions
     * const count = await prisma.decisionOption.count({
     *   where: {
     *     // ... the filter for the DecisionOptions we want to count
     *   }
     * })
    **/
    count<T extends DecisionOptionCountArgs>(
      args?: Subset<T, DecisionOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DecisionOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DecisionOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DecisionOptionAggregateArgs>(args: Subset<T, DecisionOptionAggregateArgs>): Prisma.PrismaPromise<GetDecisionOptionAggregateType<T>>

    /**
     * Group by DecisionOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DecisionOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DecisionOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DecisionOptionGroupByArgs['orderBy'] }
        : { orderBy?: DecisionOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DecisionOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDecisionOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DecisionOption model
   */
  readonly fields: DecisionOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DecisionOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DecisionOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    decision<T extends DecisionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DecisionDefaultArgs<ExtArgs>>): Prisma__DecisionClient<$Result.GetResult<Prisma.$DecisionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DecisionOption model
   */ 
  interface DecisionOptionFieldRefs {
    readonly id: FieldRef<"DecisionOption", 'String'>
    readonly decisionId: FieldRef<"DecisionOption", 'String'>
    readonly optionText: FieldRef<"DecisionOption", 'String'>
    readonly userRating: FieldRef<"DecisionOption", 'Int'>
    readonly aiScore: FieldRef<"DecisionOption", 'Float'>
    readonly criteriaScores: FieldRef<"DecisionOption", 'String'>
    readonly createdAt: FieldRef<"DecisionOption", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DecisionOption findUnique
   */
  export type DecisionOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionOption
     */
    select?: DecisionOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionOptionInclude<ExtArgs> | null
    /**
     * Filter, which DecisionOption to fetch.
     */
    where: DecisionOptionWhereUniqueInput
  }

  /**
   * DecisionOption findUniqueOrThrow
   */
  export type DecisionOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionOption
     */
    select?: DecisionOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionOptionInclude<ExtArgs> | null
    /**
     * Filter, which DecisionOption to fetch.
     */
    where: DecisionOptionWhereUniqueInput
  }

  /**
   * DecisionOption findFirst
   */
  export type DecisionOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionOption
     */
    select?: DecisionOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionOptionInclude<ExtArgs> | null
    /**
     * Filter, which DecisionOption to fetch.
     */
    where?: DecisionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DecisionOptions to fetch.
     */
    orderBy?: DecisionOptionOrderByWithRelationInput | DecisionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DecisionOptions.
     */
    cursor?: DecisionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DecisionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DecisionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DecisionOptions.
     */
    distinct?: DecisionOptionScalarFieldEnum | DecisionOptionScalarFieldEnum[]
  }

  /**
   * DecisionOption findFirstOrThrow
   */
  export type DecisionOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionOption
     */
    select?: DecisionOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionOptionInclude<ExtArgs> | null
    /**
     * Filter, which DecisionOption to fetch.
     */
    where?: DecisionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DecisionOptions to fetch.
     */
    orderBy?: DecisionOptionOrderByWithRelationInput | DecisionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DecisionOptions.
     */
    cursor?: DecisionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DecisionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DecisionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DecisionOptions.
     */
    distinct?: DecisionOptionScalarFieldEnum | DecisionOptionScalarFieldEnum[]
  }

  /**
   * DecisionOption findMany
   */
  export type DecisionOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionOption
     */
    select?: DecisionOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionOptionInclude<ExtArgs> | null
    /**
     * Filter, which DecisionOptions to fetch.
     */
    where?: DecisionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DecisionOptions to fetch.
     */
    orderBy?: DecisionOptionOrderByWithRelationInput | DecisionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DecisionOptions.
     */
    cursor?: DecisionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DecisionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DecisionOptions.
     */
    skip?: number
    distinct?: DecisionOptionScalarFieldEnum | DecisionOptionScalarFieldEnum[]
  }

  /**
   * DecisionOption create
   */
  export type DecisionOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionOption
     */
    select?: DecisionOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a DecisionOption.
     */
    data: XOR<DecisionOptionCreateInput, DecisionOptionUncheckedCreateInput>
  }

  /**
   * DecisionOption createMany
   */
  export type DecisionOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DecisionOptions.
     */
    data: DecisionOptionCreateManyInput | DecisionOptionCreateManyInput[]
  }

  /**
   * DecisionOption createManyAndReturn
   */
  export type DecisionOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionOption
     */
    select?: DecisionOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DecisionOptions.
     */
    data: DecisionOptionCreateManyInput | DecisionOptionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionOptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DecisionOption update
   */
  export type DecisionOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionOption
     */
    select?: DecisionOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a DecisionOption.
     */
    data: XOR<DecisionOptionUpdateInput, DecisionOptionUncheckedUpdateInput>
    /**
     * Choose, which DecisionOption to update.
     */
    where: DecisionOptionWhereUniqueInput
  }

  /**
   * DecisionOption updateMany
   */
  export type DecisionOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DecisionOptions.
     */
    data: XOR<DecisionOptionUpdateManyMutationInput, DecisionOptionUncheckedUpdateManyInput>
    /**
     * Filter which DecisionOptions to update
     */
    where?: DecisionOptionWhereInput
  }

  /**
   * DecisionOption upsert
   */
  export type DecisionOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionOption
     */
    select?: DecisionOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the DecisionOption to update in case it exists.
     */
    where: DecisionOptionWhereUniqueInput
    /**
     * In case the DecisionOption found by the `where` argument doesn't exist, create a new DecisionOption with this data.
     */
    create: XOR<DecisionOptionCreateInput, DecisionOptionUncheckedCreateInput>
    /**
     * In case the DecisionOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DecisionOptionUpdateInput, DecisionOptionUncheckedUpdateInput>
  }

  /**
   * DecisionOption delete
   */
  export type DecisionOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionOption
     */
    select?: DecisionOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionOptionInclude<ExtArgs> | null
    /**
     * Filter which DecisionOption to delete.
     */
    where: DecisionOptionWhereUniqueInput
  }

  /**
   * DecisionOption deleteMany
   */
  export type DecisionOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DecisionOptions to delete
     */
    where?: DecisionOptionWhereInput
  }

  /**
   * DecisionOption without action
   */
  export type DecisionOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DecisionOption
     */
    select?: DecisionOptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DecisionOptionInclude<ExtArgs> | null
  }


  /**
   * Model UserBehavior
   */

  export type AggregateUserBehavior = {
    _count: UserBehaviorCountAggregateOutputType | null
    _avg: UserBehaviorAvgAggregateOutputType | null
    _sum: UserBehaviorSumAggregateOutputType | null
    _min: UserBehaviorMinAggregateOutputType | null
    _max: UserBehaviorMaxAggregateOutputType | null
  }

  export type UserBehaviorAvgAggregateOutputType = {
    timeSpent: number | null
    hesitationTime: number | null
  }

  export type UserBehaviorSumAggregateOutputType = {
    timeSpent: number | null
    hesitationTime: number | null
  }

  export type UserBehaviorMinAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionId: string | null
    actionType: string | null
    pageUrl: string | null
    elementClicked: string | null
    timeSpent: number | null
    hesitationTime: number | null
    metadata: string | null
    createdAt: Date | null
  }

  export type UserBehaviorMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionId: string | null
    actionType: string | null
    pageUrl: string | null
    elementClicked: string | null
    timeSpent: number | null
    hesitationTime: number | null
    metadata: string | null
    createdAt: Date | null
  }

  export type UserBehaviorCountAggregateOutputType = {
    id: number
    userId: number
    sessionId: number
    actionType: number
    pageUrl: number
    elementClicked: number
    timeSpent: number
    hesitationTime: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type UserBehaviorAvgAggregateInputType = {
    timeSpent?: true
    hesitationTime?: true
  }

  export type UserBehaviorSumAggregateInputType = {
    timeSpent?: true
    hesitationTime?: true
  }

  export type UserBehaviorMinAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    actionType?: true
    pageUrl?: true
    elementClicked?: true
    timeSpent?: true
    hesitationTime?: true
    metadata?: true
    createdAt?: true
  }

  export type UserBehaviorMaxAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    actionType?: true
    pageUrl?: true
    elementClicked?: true
    timeSpent?: true
    hesitationTime?: true
    metadata?: true
    createdAt?: true
  }

  export type UserBehaviorCountAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    actionType?: true
    pageUrl?: true
    elementClicked?: true
    timeSpent?: true
    hesitationTime?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type UserBehaviorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBehavior to aggregate.
     */
    where?: UserBehaviorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBehaviors to fetch.
     */
    orderBy?: UserBehaviorOrderByWithRelationInput | UserBehaviorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBehaviorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBehaviors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBehaviors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBehaviors
    **/
    _count?: true | UserBehaviorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserBehaviorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserBehaviorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBehaviorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBehaviorMaxAggregateInputType
  }

  export type GetUserBehaviorAggregateType<T extends UserBehaviorAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBehavior]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBehavior[P]>
      : GetScalarType<T[P], AggregateUserBehavior[P]>
  }




  export type UserBehaviorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBehaviorWhereInput
    orderBy?: UserBehaviorOrderByWithAggregationInput | UserBehaviorOrderByWithAggregationInput[]
    by: UserBehaviorScalarFieldEnum[] | UserBehaviorScalarFieldEnum
    having?: UserBehaviorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBehaviorCountAggregateInputType | true
    _avg?: UserBehaviorAvgAggregateInputType
    _sum?: UserBehaviorSumAggregateInputType
    _min?: UserBehaviorMinAggregateInputType
    _max?: UserBehaviorMaxAggregateInputType
  }

  export type UserBehaviorGroupByOutputType = {
    id: string
    userId: string
    sessionId: string
    actionType: string
    pageUrl: string | null
    elementClicked: string | null
    timeSpent: number | null
    hesitationTime: number | null
    metadata: string | null
    createdAt: Date
    _count: UserBehaviorCountAggregateOutputType | null
    _avg: UserBehaviorAvgAggregateOutputType | null
    _sum: UserBehaviorSumAggregateOutputType | null
    _min: UserBehaviorMinAggregateOutputType | null
    _max: UserBehaviorMaxAggregateOutputType | null
  }

  type GetUserBehaviorGroupByPayload<T extends UserBehaviorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserBehaviorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBehaviorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBehaviorGroupByOutputType[P]>
            : GetScalarType<T[P], UserBehaviorGroupByOutputType[P]>
        }
      >
    >


  export type UserBehaviorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    actionType?: boolean
    pageUrl?: boolean
    elementClicked?: boolean
    timeSpent?: boolean
    hesitationTime?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBehavior"]>

  export type UserBehaviorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    actionType?: boolean
    pageUrl?: boolean
    elementClicked?: boolean
    timeSpent?: boolean
    hesitationTime?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBehavior"]>

  export type UserBehaviorSelectScalar = {
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    actionType?: boolean
    pageUrl?: boolean
    elementClicked?: boolean
    timeSpent?: boolean
    hesitationTime?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type UserBehaviorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserBehaviorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserBehaviorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserBehavior"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      sessionId: string
      actionType: string
      pageUrl: string | null
      elementClicked: string | null
      timeSpent: number | null
      hesitationTime: number | null
      metadata: string | null
      createdAt: Date
    }, ExtArgs["result"]["userBehavior"]>
    composites: {}
  }

  type UserBehaviorGetPayload<S extends boolean | null | undefined | UserBehaviorDefaultArgs> = $Result.GetResult<Prisma.$UserBehaviorPayload, S>

  type UserBehaviorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserBehaviorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserBehaviorCountAggregateInputType | true
    }

  export interface UserBehaviorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBehavior'], meta: { name: 'UserBehavior' } }
    /**
     * Find zero or one UserBehavior that matches the filter.
     * @param {UserBehaviorFindUniqueArgs} args - Arguments to find a UserBehavior
     * @example
     * // Get one UserBehavior
     * const userBehavior = await prisma.userBehavior.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBehaviorFindUniqueArgs>(args: SelectSubset<T, UserBehaviorFindUniqueArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserBehavior that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserBehaviorFindUniqueOrThrowArgs} args - Arguments to find a UserBehavior
     * @example
     * // Get one UserBehavior
     * const userBehavior = await prisma.userBehavior.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBehaviorFindUniqueOrThrowArgs>(args: SelectSubset<T, UserBehaviorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserBehavior that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorFindFirstArgs} args - Arguments to find a UserBehavior
     * @example
     * // Get one UserBehavior
     * const userBehavior = await prisma.userBehavior.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBehaviorFindFirstArgs>(args?: SelectSubset<T, UserBehaviorFindFirstArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserBehavior that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorFindFirstOrThrowArgs} args - Arguments to find a UserBehavior
     * @example
     * // Get one UserBehavior
     * const userBehavior = await prisma.userBehavior.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBehaviorFindFirstOrThrowArgs>(args?: SelectSubset<T, UserBehaviorFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserBehaviors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBehaviors
     * const userBehaviors = await prisma.userBehavior.findMany()
     * 
     * // Get first 10 UserBehaviors
     * const userBehaviors = await prisma.userBehavior.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBehaviorWithIdOnly = await prisma.userBehavior.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserBehaviorFindManyArgs>(args?: SelectSubset<T, UserBehaviorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserBehavior.
     * @param {UserBehaviorCreateArgs} args - Arguments to create a UserBehavior.
     * @example
     * // Create one UserBehavior
     * const UserBehavior = await prisma.userBehavior.create({
     *   data: {
     *     // ... data to create a UserBehavior
     *   }
     * })
     * 
     */
    create<T extends UserBehaviorCreateArgs>(args: SelectSubset<T, UserBehaviorCreateArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserBehaviors.
     * @param {UserBehaviorCreateManyArgs} args - Arguments to create many UserBehaviors.
     * @example
     * // Create many UserBehaviors
     * const userBehavior = await prisma.userBehavior.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserBehaviorCreateManyArgs>(args?: SelectSubset<T, UserBehaviorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserBehaviors and returns the data saved in the database.
     * @param {UserBehaviorCreateManyAndReturnArgs} args - Arguments to create many UserBehaviors.
     * @example
     * // Create many UserBehaviors
     * const userBehavior = await prisma.userBehavior.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserBehaviors and only return the `id`
     * const userBehaviorWithIdOnly = await prisma.userBehavior.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserBehaviorCreateManyAndReturnArgs>(args?: SelectSubset<T, UserBehaviorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserBehavior.
     * @param {UserBehaviorDeleteArgs} args - Arguments to delete one UserBehavior.
     * @example
     * // Delete one UserBehavior
     * const UserBehavior = await prisma.userBehavior.delete({
     *   where: {
     *     // ... filter to delete one UserBehavior
     *   }
     * })
     * 
     */
    delete<T extends UserBehaviorDeleteArgs>(args: SelectSubset<T, UserBehaviorDeleteArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserBehavior.
     * @param {UserBehaviorUpdateArgs} args - Arguments to update one UserBehavior.
     * @example
     * // Update one UserBehavior
     * const userBehavior = await prisma.userBehavior.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserBehaviorUpdateArgs>(args: SelectSubset<T, UserBehaviorUpdateArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserBehaviors.
     * @param {UserBehaviorDeleteManyArgs} args - Arguments to filter UserBehaviors to delete.
     * @example
     * // Delete a few UserBehaviors
     * const { count } = await prisma.userBehavior.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserBehaviorDeleteManyArgs>(args?: SelectSubset<T, UserBehaviorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBehaviors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBehaviors
     * const userBehavior = await prisma.userBehavior.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserBehaviorUpdateManyArgs>(args: SelectSubset<T, UserBehaviorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserBehavior.
     * @param {UserBehaviorUpsertArgs} args - Arguments to update or create a UserBehavior.
     * @example
     * // Update or create a UserBehavior
     * const userBehavior = await prisma.userBehavior.upsert({
     *   create: {
     *     // ... data to create a UserBehavior
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBehavior we want to update
     *   }
     * })
     */
    upsert<T extends UserBehaviorUpsertArgs>(args: SelectSubset<T, UserBehaviorUpsertArgs<ExtArgs>>): Prisma__UserBehaviorClient<$Result.GetResult<Prisma.$UserBehaviorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserBehaviors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorCountArgs} args - Arguments to filter UserBehaviors to count.
     * @example
     * // Count the number of UserBehaviors
     * const count = await prisma.userBehavior.count({
     *   where: {
     *     // ... the filter for the UserBehaviors we want to count
     *   }
     * })
    **/
    count<T extends UserBehaviorCountArgs>(
      args?: Subset<T, UserBehaviorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBehaviorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBehavior.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBehaviorAggregateArgs>(args: Subset<T, UserBehaviorAggregateArgs>): Prisma.PrismaPromise<GetUserBehaviorAggregateType<T>>

    /**
     * Group by UserBehavior.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBehaviorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBehaviorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBehaviorGroupByArgs['orderBy'] }
        : { orderBy?: UserBehaviorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBehaviorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBehaviorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserBehavior model
   */
  readonly fields: UserBehaviorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBehavior.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBehaviorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserBehavior model
   */ 
  interface UserBehaviorFieldRefs {
    readonly id: FieldRef<"UserBehavior", 'String'>
    readonly userId: FieldRef<"UserBehavior", 'String'>
    readonly sessionId: FieldRef<"UserBehavior", 'String'>
    readonly actionType: FieldRef<"UserBehavior", 'String'>
    readonly pageUrl: FieldRef<"UserBehavior", 'String'>
    readonly elementClicked: FieldRef<"UserBehavior", 'String'>
    readonly timeSpent: FieldRef<"UserBehavior", 'Int'>
    readonly hesitationTime: FieldRef<"UserBehavior", 'Int'>
    readonly metadata: FieldRef<"UserBehavior", 'String'>
    readonly createdAt: FieldRef<"UserBehavior", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserBehavior findUnique
   */
  export type UserBehaviorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * Filter, which UserBehavior to fetch.
     */
    where: UserBehaviorWhereUniqueInput
  }

  /**
   * UserBehavior findUniqueOrThrow
   */
  export type UserBehaviorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * Filter, which UserBehavior to fetch.
     */
    where: UserBehaviorWhereUniqueInput
  }

  /**
   * UserBehavior findFirst
   */
  export type UserBehaviorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * Filter, which UserBehavior to fetch.
     */
    where?: UserBehaviorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBehaviors to fetch.
     */
    orderBy?: UserBehaviorOrderByWithRelationInput | UserBehaviorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBehaviors.
     */
    cursor?: UserBehaviorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBehaviors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBehaviors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBehaviors.
     */
    distinct?: UserBehaviorScalarFieldEnum | UserBehaviorScalarFieldEnum[]
  }

  /**
   * UserBehavior findFirstOrThrow
   */
  export type UserBehaviorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * Filter, which UserBehavior to fetch.
     */
    where?: UserBehaviorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBehaviors to fetch.
     */
    orderBy?: UserBehaviorOrderByWithRelationInput | UserBehaviorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBehaviors.
     */
    cursor?: UserBehaviorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBehaviors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBehaviors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBehaviors.
     */
    distinct?: UserBehaviorScalarFieldEnum | UserBehaviorScalarFieldEnum[]
  }

  /**
   * UserBehavior findMany
   */
  export type UserBehaviorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * Filter, which UserBehaviors to fetch.
     */
    where?: UserBehaviorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBehaviors to fetch.
     */
    orderBy?: UserBehaviorOrderByWithRelationInput | UserBehaviorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBehaviors.
     */
    cursor?: UserBehaviorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBehaviors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBehaviors.
     */
    skip?: number
    distinct?: UserBehaviorScalarFieldEnum | UserBehaviorScalarFieldEnum[]
  }

  /**
   * UserBehavior create
   */
  export type UserBehaviorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * The data needed to create a UserBehavior.
     */
    data: XOR<UserBehaviorCreateInput, UserBehaviorUncheckedCreateInput>
  }

  /**
   * UserBehavior createMany
   */
  export type UserBehaviorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserBehaviors.
     */
    data: UserBehaviorCreateManyInput | UserBehaviorCreateManyInput[]
  }

  /**
   * UserBehavior createManyAndReturn
   */
  export type UserBehaviorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserBehaviors.
     */
    data: UserBehaviorCreateManyInput | UserBehaviorCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserBehavior update
   */
  export type UserBehaviorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * The data needed to update a UserBehavior.
     */
    data: XOR<UserBehaviorUpdateInput, UserBehaviorUncheckedUpdateInput>
    /**
     * Choose, which UserBehavior to update.
     */
    where: UserBehaviorWhereUniqueInput
  }

  /**
   * UserBehavior updateMany
   */
  export type UserBehaviorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserBehaviors.
     */
    data: XOR<UserBehaviorUpdateManyMutationInput, UserBehaviorUncheckedUpdateManyInput>
    /**
     * Filter which UserBehaviors to update
     */
    where?: UserBehaviorWhereInput
  }

  /**
   * UserBehavior upsert
   */
  export type UserBehaviorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * The filter to search for the UserBehavior to update in case it exists.
     */
    where: UserBehaviorWhereUniqueInput
    /**
     * In case the UserBehavior found by the `where` argument doesn't exist, create a new UserBehavior with this data.
     */
    create: XOR<UserBehaviorCreateInput, UserBehaviorUncheckedCreateInput>
    /**
     * In case the UserBehavior was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBehaviorUpdateInput, UserBehaviorUncheckedUpdateInput>
  }

  /**
   * UserBehavior delete
   */
  export type UserBehaviorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
    /**
     * Filter which UserBehavior to delete.
     */
    where: UserBehaviorWhereUniqueInput
  }

  /**
   * UserBehavior deleteMany
   */
  export type UserBehaviorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBehaviors to delete
     */
    where?: UserBehaviorWhereInput
  }

  /**
   * UserBehavior without action
   */
  export type UserBehaviorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBehavior
     */
    select?: UserBehaviorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBehaviorInclude<ExtArgs> | null
  }


  /**
   * Model AlgorithmPerformance
   */

  export type AggregateAlgorithmPerformance = {
    _count: AlgorithmPerformanceCountAggregateOutputType | null
    _avg: AlgorithmPerformanceAvgAggregateOutputType | null
    _sum: AlgorithmPerformanceSumAggregateOutputType | null
    _min: AlgorithmPerformanceMinAggregateOutputType | null
    _max: AlgorithmPerformanceMaxAggregateOutputType | null
  }

  export type AlgorithmPerformanceAvgAggregateOutputType = {
    userSatisfaction: number | null
    processingTime: number | null
  }

  export type AlgorithmPerformanceSumAggregateOutputType = {
    userSatisfaction: number | null
    processingTime: number | null
  }

  export type AlgorithmPerformanceMinAggregateOutputType = {
    id: string | null
    userId: string | null
    algorithmType: string | null
    inputData: string | null
    outputData: string | null
    userSatisfaction: number | null
    processingTime: number | null
    createdAt: Date | null
  }

  export type AlgorithmPerformanceMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    algorithmType: string | null
    inputData: string | null
    outputData: string | null
    userSatisfaction: number | null
    processingTime: number | null
    createdAt: Date | null
  }

  export type AlgorithmPerformanceCountAggregateOutputType = {
    id: number
    userId: number
    algorithmType: number
    inputData: number
    outputData: number
    userSatisfaction: number
    processingTime: number
    createdAt: number
    _all: number
  }


  export type AlgorithmPerformanceAvgAggregateInputType = {
    userSatisfaction?: true
    processingTime?: true
  }

  export type AlgorithmPerformanceSumAggregateInputType = {
    userSatisfaction?: true
    processingTime?: true
  }

  export type AlgorithmPerformanceMinAggregateInputType = {
    id?: true
    userId?: true
    algorithmType?: true
    inputData?: true
    outputData?: true
    userSatisfaction?: true
    processingTime?: true
    createdAt?: true
  }

  export type AlgorithmPerformanceMaxAggregateInputType = {
    id?: true
    userId?: true
    algorithmType?: true
    inputData?: true
    outputData?: true
    userSatisfaction?: true
    processingTime?: true
    createdAt?: true
  }

  export type AlgorithmPerformanceCountAggregateInputType = {
    id?: true
    userId?: true
    algorithmType?: true
    inputData?: true
    outputData?: true
    userSatisfaction?: true
    processingTime?: true
    createdAt?: true
    _all?: true
  }

  export type AlgorithmPerformanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlgorithmPerformance to aggregate.
     */
    where?: AlgorithmPerformanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlgorithmPerformances to fetch.
     */
    orderBy?: AlgorithmPerformanceOrderByWithRelationInput | AlgorithmPerformanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlgorithmPerformanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlgorithmPerformances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlgorithmPerformances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AlgorithmPerformances
    **/
    _count?: true | AlgorithmPerformanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlgorithmPerformanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlgorithmPerformanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlgorithmPerformanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlgorithmPerformanceMaxAggregateInputType
  }

  export type GetAlgorithmPerformanceAggregateType<T extends AlgorithmPerformanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAlgorithmPerformance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlgorithmPerformance[P]>
      : GetScalarType<T[P], AggregateAlgorithmPerformance[P]>
  }




  export type AlgorithmPerformanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlgorithmPerformanceWhereInput
    orderBy?: AlgorithmPerformanceOrderByWithAggregationInput | AlgorithmPerformanceOrderByWithAggregationInput[]
    by: AlgorithmPerformanceScalarFieldEnum[] | AlgorithmPerformanceScalarFieldEnum
    having?: AlgorithmPerformanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlgorithmPerformanceCountAggregateInputType | true
    _avg?: AlgorithmPerformanceAvgAggregateInputType
    _sum?: AlgorithmPerformanceSumAggregateInputType
    _min?: AlgorithmPerformanceMinAggregateInputType
    _max?: AlgorithmPerformanceMaxAggregateInputType
  }

  export type AlgorithmPerformanceGroupByOutputType = {
    id: string
    userId: string
    algorithmType: string
    inputData: string
    outputData: string
    userSatisfaction: number | null
    processingTime: number
    createdAt: Date
    _count: AlgorithmPerformanceCountAggregateOutputType | null
    _avg: AlgorithmPerformanceAvgAggregateOutputType | null
    _sum: AlgorithmPerformanceSumAggregateOutputType | null
    _min: AlgorithmPerformanceMinAggregateOutputType | null
    _max: AlgorithmPerformanceMaxAggregateOutputType | null
  }

  type GetAlgorithmPerformanceGroupByPayload<T extends AlgorithmPerformanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlgorithmPerformanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlgorithmPerformanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlgorithmPerformanceGroupByOutputType[P]>
            : GetScalarType<T[P], AlgorithmPerformanceGroupByOutputType[P]>
        }
      >
    >


  export type AlgorithmPerformanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    algorithmType?: boolean
    inputData?: boolean
    outputData?: boolean
    userSatisfaction?: boolean
    processingTime?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["algorithmPerformance"]>

  export type AlgorithmPerformanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    algorithmType?: boolean
    inputData?: boolean
    outputData?: boolean
    userSatisfaction?: boolean
    processingTime?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["algorithmPerformance"]>

  export type AlgorithmPerformanceSelectScalar = {
    id?: boolean
    userId?: boolean
    algorithmType?: boolean
    inputData?: boolean
    outputData?: boolean
    userSatisfaction?: boolean
    processingTime?: boolean
    createdAt?: boolean
  }

  export type AlgorithmPerformanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AlgorithmPerformanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AlgorithmPerformancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AlgorithmPerformance"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      algorithmType: string
      inputData: string
      outputData: string
      userSatisfaction: number | null
      processingTime: number
      createdAt: Date
    }, ExtArgs["result"]["algorithmPerformance"]>
    composites: {}
  }

  type AlgorithmPerformanceGetPayload<S extends boolean | null | undefined | AlgorithmPerformanceDefaultArgs> = $Result.GetResult<Prisma.$AlgorithmPerformancePayload, S>

  type AlgorithmPerformanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlgorithmPerformanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlgorithmPerformanceCountAggregateInputType | true
    }

  export interface AlgorithmPerformanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AlgorithmPerformance'], meta: { name: 'AlgorithmPerformance' } }
    /**
     * Find zero or one AlgorithmPerformance that matches the filter.
     * @param {AlgorithmPerformanceFindUniqueArgs} args - Arguments to find a AlgorithmPerformance
     * @example
     * // Get one AlgorithmPerformance
     * const algorithmPerformance = await prisma.algorithmPerformance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlgorithmPerformanceFindUniqueArgs>(args: SelectSubset<T, AlgorithmPerformanceFindUniqueArgs<ExtArgs>>): Prisma__AlgorithmPerformanceClient<$Result.GetResult<Prisma.$AlgorithmPerformancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AlgorithmPerformance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlgorithmPerformanceFindUniqueOrThrowArgs} args - Arguments to find a AlgorithmPerformance
     * @example
     * // Get one AlgorithmPerformance
     * const algorithmPerformance = await prisma.algorithmPerformance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlgorithmPerformanceFindUniqueOrThrowArgs>(args: SelectSubset<T, AlgorithmPerformanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlgorithmPerformanceClient<$Result.GetResult<Prisma.$AlgorithmPerformancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AlgorithmPerformance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlgorithmPerformanceFindFirstArgs} args - Arguments to find a AlgorithmPerformance
     * @example
     * // Get one AlgorithmPerformance
     * const algorithmPerformance = await prisma.algorithmPerformance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlgorithmPerformanceFindFirstArgs>(args?: SelectSubset<T, AlgorithmPerformanceFindFirstArgs<ExtArgs>>): Prisma__AlgorithmPerformanceClient<$Result.GetResult<Prisma.$AlgorithmPerformancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AlgorithmPerformance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlgorithmPerformanceFindFirstOrThrowArgs} args - Arguments to find a AlgorithmPerformance
     * @example
     * // Get one AlgorithmPerformance
     * const algorithmPerformance = await prisma.algorithmPerformance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlgorithmPerformanceFindFirstOrThrowArgs>(args?: SelectSubset<T, AlgorithmPerformanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlgorithmPerformanceClient<$Result.GetResult<Prisma.$AlgorithmPerformancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AlgorithmPerformances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlgorithmPerformanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AlgorithmPerformances
     * const algorithmPerformances = await prisma.algorithmPerformance.findMany()
     * 
     * // Get first 10 AlgorithmPerformances
     * const algorithmPerformances = await prisma.algorithmPerformance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const algorithmPerformanceWithIdOnly = await prisma.algorithmPerformance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlgorithmPerformanceFindManyArgs>(args?: SelectSubset<T, AlgorithmPerformanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlgorithmPerformancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AlgorithmPerformance.
     * @param {AlgorithmPerformanceCreateArgs} args - Arguments to create a AlgorithmPerformance.
     * @example
     * // Create one AlgorithmPerformance
     * const AlgorithmPerformance = await prisma.algorithmPerformance.create({
     *   data: {
     *     // ... data to create a AlgorithmPerformance
     *   }
     * })
     * 
     */
    create<T extends AlgorithmPerformanceCreateArgs>(args: SelectSubset<T, AlgorithmPerformanceCreateArgs<ExtArgs>>): Prisma__AlgorithmPerformanceClient<$Result.GetResult<Prisma.$AlgorithmPerformancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AlgorithmPerformances.
     * @param {AlgorithmPerformanceCreateManyArgs} args - Arguments to create many AlgorithmPerformances.
     * @example
     * // Create many AlgorithmPerformances
     * const algorithmPerformance = await prisma.algorithmPerformance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlgorithmPerformanceCreateManyArgs>(args?: SelectSubset<T, AlgorithmPerformanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AlgorithmPerformances and returns the data saved in the database.
     * @param {AlgorithmPerformanceCreateManyAndReturnArgs} args - Arguments to create many AlgorithmPerformances.
     * @example
     * // Create many AlgorithmPerformances
     * const algorithmPerformance = await prisma.algorithmPerformance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AlgorithmPerformances and only return the `id`
     * const algorithmPerformanceWithIdOnly = await prisma.algorithmPerformance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlgorithmPerformanceCreateManyAndReturnArgs>(args?: SelectSubset<T, AlgorithmPerformanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlgorithmPerformancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AlgorithmPerformance.
     * @param {AlgorithmPerformanceDeleteArgs} args - Arguments to delete one AlgorithmPerformance.
     * @example
     * // Delete one AlgorithmPerformance
     * const AlgorithmPerformance = await prisma.algorithmPerformance.delete({
     *   where: {
     *     // ... filter to delete one AlgorithmPerformance
     *   }
     * })
     * 
     */
    delete<T extends AlgorithmPerformanceDeleteArgs>(args: SelectSubset<T, AlgorithmPerformanceDeleteArgs<ExtArgs>>): Prisma__AlgorithmPerformanceClient<$Result.GetResult<Prisma.$AlgorithmPerformancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AlgorithmPerformance.
     * @param {AlgorithmPerformanceUpdateArgs} args - Arguments to update one AlgorithmPerformance.
     * @example
     * // Update one AlgorithmPerformance
     * const algorithmPerformance = await prisma.algorithmPerformance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlgorithmPerformanceUpdateArgs>(args: SelectSubset<T, AlgorithmPerformanceUpdateArgs<ExtArgs>>): Prisma__AlgorithmPerformanceClient<$Result.GetResult<Prisma.$AlgorithmPerformancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AlgorithmPerformances.
     * @param {AlgorithmPerformanceDeleteManyArgs} args - Arguments to filter AlgorithmPerformances to delete.
     * @example
     * // Delete a few AlgorithmPerformances
     * const { count } = await prisma.algorithmPerformance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlgorithmPerformanceDeleteManyArgs>(args?: SelectSubset<T, AlgorithmPerformanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlgorithmPerformances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlgorithmPerformanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AlgorithmPerformances
     * const algorithmPerformance = await prisma.algorithmPerformance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlgorithmPerformanceUpdateManyArgs>(args: SelectSubset<T, AlgorithmPerformanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AlgorithmPerformance.
     * @param {AlgorithmPerformanceUpsertArgs} args - Arguments to update or create a AlgorithmPerformance.
     * @example
     * // Update or create a AlgorithmPerformance
     * const algorithmPerformance = await prisma.algorithmPerformance.upsert({
     *   create: {
     *     // ... data to create a AlgorithmPerformance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AlgorithmPerformance we want to update
     *   }
     * })
     */
    upsert<T extends AlgorithmPerformanceUpsertArgs>(args: SelectSubset<T, AlgorithmPerformanceUpsertArgs<ExtArgs>>): Prisma__AlgorithmPerformanceClient<$Result.GetResult<Prisma.$AlgorithmPerformancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AlgorithmPerformances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlgorithmPerformanceCountArgs} args - Arguments to filter AlgorithmPerformances to count.
     * @example
     * // Count the number of AlgorithmPerformances
     * const count = await prisma.algorithmPerformance.count({
     *   where: {
     *     // ... the filter for the AlgorithmPerformances we want to count
     *   }
     * })
    **/
    count<T extends AlgorithmPerformanceCountArgs>(
      args?: Subset<T, AlgorithmPerformanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlgorithmPerformanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AlgorithmPerformance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlgorithmPerformanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlgorithmPerformanceAggregateArgs>(args: Subset<T, AlgorithmPerformanceAggregateArgs>): Prisma.PrismaPromise<GetAlgorithmPerformanceAggregateType<T>>

    /**
     * Group by AlgorithmPerformance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlgorithmPerformanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlgorithmPerformanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlgorithmPerformanceGroupByArgs['orderBy'] }
        : { orderBy?: AlgorithmPerformanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlgorithmPerformanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlgorithmPerformanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AlgorithmPerformance model
   */
  readonly fields: AlgorithmPerformanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AlgorithmPerformance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlgorithmPerformanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AlgorithmPerformance model
   */ 
  interface AlgorithmPerformanceFieldRefs {
    readonly id: FieldRef<"AlgorithmPerformance", 'String'>
    readonly userId: FieldRef<"AlgorithmPerformance", 'String'>
    readonly algorithmType: FieldRef<"AlgorithmPerformance", 'String'>
    readonly inputData: FieldRef<"AlgorithmPerformance", 'String'>
    readonly outputData: FieldRef<"AlgorithmPerformance", 'String'>
    readonly userSatisfaction: FieldRef<"AlgorithmPerformance", 'Int'>
    readonly processingTime: FieldRef<"AlgorithmPerformance", 'Int'>
    readonly createdAt: FieldRef<"AlgorithmPerformance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AlgorithmPerformance findUnique
   */
  export type AlgorithmPerformanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlgorithmPerformance
     */
    select?: AlgorithmPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlgorithmPerformanceInclude<ExtArgs> | null
    /**
     * Filter, which AlgorithmPerformance to fetch.
     */
    where: AlgorithmPerformanceWhereUniqueInput
  }

  /**
   * AlgorithmPerformance findUniqueOrThrow
   */
  export type AlgorithmPerformanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlgorithmPerformance
     */
    select?: AlgorithmPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlgorithmPerformanceInclude<ExtArgs> | null
    /**
     * Filter, which AlgorithmPerformance to fetch.
     */
    where: AlgorithmPerformanceWhereUniqueInput
  }

  /**
   * AlgorithmPerformance findFirst
   */
  export type AlgorithmPerformanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlgorithmPerformance
     */
    select?: AlgorithmPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlgorithmPerformanceInclude<ExtArgs> | null
    /**
     * Filter, which AlgorithmPerformance to fetch.
     */
    where?: AlgorithmPerformanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlgorithmPerformances to fetch.
     */
    orderBy?: AlgorithmPerformanceOrderByWithRelationInput | AlgorithmPerformanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlgorithmPerformances.
     */
    cursor?: AlgorithmPerformanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlgorithmPerformances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlgorithmPerformances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlgorithmPerformances.
     */
    distinct?: AlgorithmPerformanceScalarFieldEnum | AlgorithmPerformanceScalarFieldEnum[]
  }

  /**
   * AlgorithmPerformance findFirstOrThrow
   */
  export type AlgorithmPerformanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlgorithmPerformance
     */
    select?: AlgorithmPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlgorithmPerformanceInclude<ExtArgs> | null
    /**
     * Filter, which AlgorithmPerformance to fetch.
     */
    where?: AlgorithmPerformanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlgorithmPerformances to fetch.
     */
    orderBy?: AlgorithmPerformanceOrderByWithRelationInput | AlgorithmPerformanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlgorithmPerformances.
     */
    cursor?: AlgorithmPerformanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlgorithmPerformances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlgorithmPerformances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlgorithmPerformances.
     */
    distinct?: AlgorithmPerformanceScalarFieldEnum | AlgorithmPerformanceScalarFieldEnum[]
  }

  /**
   * AlgorithmPerformance findMany
   */
  export type AlgorithmPerformanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlgorithmPerformance
     */
    select?: AlgorithmPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlgorithmPerformanceInclude<ExtArgs> | null
    /**
     * Filter, which AlgorithmPerformances to fetch.
     */
    where?: AlgorithmPerformanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlgorithmPerformances to fetch.
     */
    orderBy?: AlgorithmPerformanceOrderByWithRelationInput | AlgorithmPerformanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AlgorithmPerformances.
     */
    cursor?: AlgorithmPerformanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlgorithmPerformances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlgorithmPerformances.
     */
    skip?: number
    distinct?: AlgorithmPerformanceScalarFieldEnum | AlgorithmPerformanceScalarFieldEnum[]
  }

  /**
   * AlgorithmPerformance create
   */
  export type AlgorithmPerformanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlgorithmPerformance
     */
    select?: AlgorithmPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlgorithmPerformanceInclude<ExtArgs> | null
    /**
     * The data needed to create a AlgorithmPerformance.
     */
    data: XOR<AlgorithmPerformanceCreateInput, AlgorithmPerformanceUncheckedCreateInput>
  }

  /**
   * AlgorithmPerformance createMany
   */
  export type AlgorithmPerformanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AlgorithmPerformances.
     */
    data: AlgorithmPerformanceCreateManyInput | AlgorithmPerformanceCreateManyInput[]
  }

  /**
   * AlgorithmPerformance createManyAndReturn
   */
  export type AlgorithmPerformanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlgorithmPerformance
     */
    select?: AlgorithmPerformanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AlgorithmPerformances.
     */
    data: AlgorithmPerformanceCreateManyInput | AlgorithmPerformanceCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlgorithmPerformanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AlgorithmPerformance update
   */
  export type AlgorithmPerformanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlgorithmPerformance
     */
    select?: AlgorithmPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlgorithmPerformanceInclude<ExtArgs> | null
    /**
     * The data needed to update a AlgorithmPerformance.
     */
    data: XOR<AlgorithmPerformanceUpdateInput, AlgorithmPerformanceUncheckedUpdateInput>
    /**
     * Choose, which AlgorithmPerformance to update.
     */
    where: AlgorithmPerformanceWhereUniqueInput
  }

  /**
   * AlgorithmPerformance updateMany
   */
  export type AlgorithmPerformanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AlgorithmPerformances.
     */
    data: XOR<AlgorithmPerformanceUpdateManyMutationInput, AlgorithmPerformanceUncheckedUpdateManyInput>
    /**
     * Filter which AlgorithmPerformances to update
     */
    where?: AlgorithmPerformanceWhereInput
  }

  /**
   * AlgorithmPerformance upsert
   */
  export type AlgorithmPerformanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlgorithmPerformance
     */
    select?: AlgorithmPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlgorithmPerformanceInclude<ExtArgs> | null
    /**
     * The filter to search for the AlgorithmPerformance to update in case it exists.
     */
    where: AlgorithmPerformanceWhereUniqueInput
    /**
     * In case the AlgorithmPerformance found by the `where` argument doesn't exist, create a new AlgorithmPerformance with this data.
     */
    create: XOR<AlgorithmPerformanceCreateInput, AlgorithmPerformanceUncheckedCreateInput>
    /**
     * In case the AlgorithmPerformance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlgorithmPerformanceUpdateInput, AlgorithmPerformanceUncheckedUpdateInput>
  }

  /**
   * AlgorithmPerformance delete
   */
  export type AlgorithmPerformanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlgorithmPerformance
     */
    select?: AlgorithmPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlgorithmPerformanceInclude<ExtArgs> | null
    /**
     * Filter which AlgorithmPerformance to delete.
     */
    where: AlgorithmPerformanceWhereUniqueInput
  }

  /**
   * AlgorithmPerformance deleteMany
   */
  export type AlgorithmPerformanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlgorithmPerformances to delete
     */
    where?: AlgorithmPerformanceWhereInput
  }

  /**
   * AlgorithmPerformance without action
   */
  export type AlgorithmPerformanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlgorithmPerformance
     */
    select?: AlgorithmPerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlgorithmPerformanceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    name: 'name',
    age: 'age',
    personalityType: 'personalityType',
    anxietyLevel: 'anxietyLevel',
    provider: 'provider',
    providerId: 'providerId',
    isEmailVerified: 'isEmailVerified',
    lastLoginAt: 'lastLoginAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type UserSessionScalarFieldEnum = (typeof UserSessionScalarFieldEnum)[keyof typeof UserSessionScalarFieldEnum]


  export const DecisionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    decisionType: 'decisionType',
    title: 'title',
    description: 'description',
    chosenOption: 'chosenOption',
    confidenceScore: 'confidenceScore',
    outcomeRating: 'outcomeRating',
    contextData: 'contextData',
    createdAt: 'createdAt'
  };

  export type DecisionScalarFieldEnum = (typeof DecisionScalarFieldEnum)[keyof typeof DecisionScalarFieldEnum]


  export const DecisionOptionScalarFieldEnum: {
    id: 'id',
    decisionId: 'decisionId',
    optionText: 'optionText',
    userRating: 'userRating',
    aiScore: 'aiScore',
    criteriaScores: 'criteriaScores',
    createdAt: 'createdAt'
  };

  export type DecisionOptionScalarFieldEnum = (typeof DecisionOptionScalarFieldEnum)[keyof typeof DecisionOptionScalarFieldEnum]


  export const UserBehaviorScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sessionId: 'sessionId',
    actionType: 'actionType',
    pageUrl: 'pageUrl',
    elementClicked: 'elementClicked',
    timeSpent: 'timeSpent',
    hesitationTime: 'hesitationTime',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type UserBehaviorScalarFieldEnum = (typeof UserBehaviorScalarFieldEnum)[keyof typeof UserBehaviorScalarFieldEnum]


  export const AlgorithmPerformanceScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    algorithmType: 'algorithmType',
    inputData: 'inputData',
    outputData: 'outputData',
    userSatisfaction: 'userSatisfaction',
    processingTime: 'processingTime',
    createdAt: 'createdAt'
  };

  export type AlgorithmPerformanceScalarFieldEnum = (typeof AlgorithmPerformanceScalarFieldEnum)[keyof typeof AlgorithmPerformanceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    age?: IntNullableFilter<"User"> | number | null
    personalityType?: StringNullableFilter<"User"> | string | null
    anxietyLevel?: IntNullableFilter<"User"> | number | null
    provider?: StringNullableFilter<"User"> | string | null
    providerId?: StringNullableFilter<"User"> | string | null
    isEmailVerified?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    decisions?: DecisionListRelationFilter
    behaviors?: UserBehaviorListRelationFilter
    algorithmPerfs?: AlgorithmPerformanceListRelationFilter
    sessions?: UserSessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    personalityType?: SortOrderInput | SortOrder
    anxietyLevel?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    isEmailVerified?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    decisions?: DecisionOrderByRelationAggregateInput
    behaviors?: UserBehaviorOrderByRelationAggregateInput
    algorithmPerfs?: AlgorithmPerformanceOrderByRelationAggregateInput
    sessions?: UserSessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    age?: IntNullableFilter<"User"> | number | null
    personalityType?: StringNullableFilter<"User"> | string | null
    anxietyLevel?: IntNullableFilter<"User"> | number | null
    provider?: StringNullableFilter<"User"> | string | null
    providerId?: StringNullableFilter<"User"> | string | null
    isEmailVerified?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    decisions?: DecisionListRelationFilter
    behaviors?: UserBehaviorListRelationFilter
    algorithmPerfs?: AlgorithmPerformanceListRelationFilter
    sessions?: UserSessionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    personalityType?: SortOrderInput | SortOrder
    anxietyLevel?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    isEmailVerified?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    age?: IntNullableWithAggregatesFilter<"User"> | number | null
    personalityType?: StringNullableWithAggregatesFilter<"User"> | string | null
    anxietyLevel?: IntNullableWithAggregatesFilter<"User"> | number | null
    provider?: StringNullableWithAggregatesFilter<"User"> | string | null
    providerId?: StringNullableWithAggregatesFilter<"User"> | string | null
    isEmailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserSessionWhereInput = {
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    token?: StringFilter<"UserSession"> | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    userId?: StringFilter<"UserSession"> | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type UserSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: UserSessionCountOrderByAggregateInput
    _max?: UserSessionMaxOrderByAggregateInput
    _min?: UserSessionMinOrderByAggregateInput
  }

  export type UserSessionScalarWhereWithAggregatesInput = {
    AND?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    OR?: UserSessionScalarWhereWithAggregatesInput[]
    NOT?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSession"> | string
    userId?: StringWithAggregatesFilter<"UserSession"> | string
    token?: StringWithAggregatesFilter<"UserSession"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
  }

  export type DecisionWhereInput = {
    AND?: DecisionWhereInput | DecisionWhereInput[]
    OR?: DecisionWhereInput[]
    NOT?: DecisionWhereInput | DecisionWhereInput[]
    id?: StringFilter<"Decision"> | string
    userId?: StringFilter<"Decision"> | string
    decisionType?: StringFilter<"Decision"> | string
    title?: StringFilter<"Decision"> | string
    description?: StringNullableFilter<"Decision"> | string | null
    chosenOption?: StringNullableFilter<"Decision"> | string | null
    confidenceScore?: FloatNullableFilter<"Decision"> | number | null
    outcomeRating?: IntNullableFilter<"Decision"> | number | null
    contextData?: StringNullableFilter<"Decision"> | string | null
    createdAt?: DateTimeFilter<"Decision"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    options?: DecisionOptionListRelationFilter
  }

  export type DecisionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    decisionType?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    chosenOption?: SortOrderInput | SortOrder
    confidenceScore?: SortOrderInput | SortOrder
    outcomeRating?: SortOrderInput | SortOrder
    contextData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    options?: DecisionOptionOrderByRelationAggregateInput
  }

  export type DecisionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DecisionWhereInput | DecisionWhereInput[]
    OR?: DecisionWhereInput[]
    NOT?: DecisionWhereInput | DecisionWhereInput[]
    userId?: StringFilter<"Decision"> | string
    decisionType?: StringFilter<"Decision"> | string
    title?: StringFilter<"Decision"> | string
    description?: StringNullableFilter<"Decision"> | string | null
    chosenOption?: StringNullableFilter<"Decision"> | string | null
    confidenceScore?: FloatNullableFilter<"Decision"> | number | null
    outcomeRating?: IntNullableFilter<"Decision"> | number | null
    contextData?: StringNullableFilter<"Decision"> | string | null
    createdAt?: DateTimeFilter<"Decision"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    options?: DecisionOptionListRelationFilter
  }, "id">

  export type DecisionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    decisionType?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    chosenOption?: SortOrderInput | SortOrder
    confidenceScore?: SortOrderInput | SortOrder
    outcomeRating?: SortOrderInput | SortOrder
    contextData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: DecisionCountOrderByAggregateInput
    _avg?: DecisionAvgOrderByAggregateInput
    _max?: DecisionMaxOrderByAggregateInput
    _min?: DecisionMinOrderByAggregateInput
    _sum?: DecisionSumOrderByAggregateInput
  }

  export type DecisionScalarWhereWithAggregatesInput = {
    AND?: DecisionScalarWhereWithAggregatesInput | DecisionScalarWhereWithAggregatesInput[]
    OR?: DecisionScalarWhereWithAggregatesInput[]
    NOT?: DecisionScalarWhereWithAggregatesInput | DecisionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Decision"> | string
    userId?: StringWithAggregatesFilter<"Decision"> | string
    decisionType?: StringWithAggregatesFilter<"Decision"> | string
    title?: StringWithAggregatesFilter<"Decision"> | string
    description?: StringNullableWithAggregatesFilter<"Decision"> | string | null
    chosenOption?: StringNullableWithAggregatesFilter<"Decision"> | string | null
    confidenceScore?: FloatNullableWithAggregatesFilter<"Decision"> | number | null
    outcomeRating?: IntNullableWithAggregatesFilter<"Decision"> | number | null
    contextData?: StringNullableWithAggregatesFilter<"Decision"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Decision"> | Date | string
  }

  export type DecisionOptionWhereInput = {
    AND?: DecisionOptionWhereInput | DecisionOptionWhereInput[]
    OR?: DecisionOptionWhereInput[]
    NOT?: DecisionOptionWhereInput | DecisionOptionWhereInput[]
    id?: StringFilter<"DecisionOption"> | string
    decisionId?: StringFilter<"DecisionOption"> | string
    optionText?: StringFilter<"DecisionOption"> | string
    userRating?: IntNullableFilter<"DecisionOption"> | number | null
    aiScore?: FloatNullableFilter<"DecisionOption"> | number | null
    criteriaScores?: StringNullableFilter<"DecisionOption"> | string | null
    createdAt?: DateTimeFilter<"DecisionOption"> | Date | string
    decision?: XOR<DecisionRelationFilter, DecisionWhereInput>
  }

  export type DecisionOptionOrderByWithRelationInput = {
    id?: SortOrder
    decisionId?: SortOrder
    optionText?: SortOrder
    userRating?: SortOrderInput | SortOrder
    aiScore?: SortOrderInput | SortOrder
    criteriaScores?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    decision?: DecisionOrderByWithRelationInput
  }

  export type DecisionOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DecisionOptionWhereInput | DecisionOptionWhereInput[]
    OR?: DecisionOptionWhereInput[]
    NOT?: DecisionOptionWhereInput | DecisionOptionWhereInput[]
    decisionId?: StringFilter<"DecisionOption"> | string
    optionText?: StringFilter<"DecisionOption"> | string
    userRating?: IntNullableFilter<"DecisionOption"> | number | null
    aiScore?: FloatNullableFilter<"DecisionOption"> | number | null
    criteriaScores?: StringNullableFilter<"DecisionOption"> | string | null
    createdAt?: DateTimeFilter<"DecisionOption"> | Date | string
    decision?: XOR<DecisionRelationFilter, DecisionWhereInput>
  }, "id">

  export type DecisionOptionOrderByWithAggregationInput = {
    id?: SortOrder
    decisionId?: SortOrder
    optionText?: SortOrder
    userRating?: SortOrderInput | SortOrder
    aiScore?: SortOrderInput | SortOrder
    criteriaScores?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: DecisionOptionCountOrderByAggregateInput
    _avg?: DecisionOptionAvgOrderByAggregateInput
    _max?: DecisionOptionMaxOrderByAggregateInput
    _min?: DecisionOptionMinOrderByAggregateInput
    _sum?: DecisionOptionSumOrderByAggregateInput
  }

  export type DecisionOptionScalarWhereWithAggregatesInput = {
    AND?: DecisionOptionScalarWhereWithAggregatesInput | DecisionOptionScalarWhereWithAggregatesInput[]
    OR?: DecisionOptionScalarWhereWithAggregatesInput[]
    NOT?: DecisionOptionScalarWhereWithAggregatesInput | DecisionOptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DecisionOption"> | string
    decisionId?: StringWithAggregatesFilter<"DecisionOption"> | string
    optionText?: StringWithAggregatesFilter<"DecisionOption"> | string
    userRating?: IntNullableWithAggregatesFilter<"DecisionOption"> | number | null
    aiScore?: FloatNullableWithAggregatesFilter<"DecisionOption"> | number | null
    criteriaScores?: StringNullableWithAggregatesFilter<"DecisionOption"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DecisionOption"> | Date | string
  }

  export type UserBehaviorWhereInput = {
    AND?: UserBehaviorWhereInput | UserBehaviorWhereInput[]
    OR?: UserBehaviorWhereInput[]
    NOT?: UserBehaviorWhereInput | UserBehaviorWhereInput[]
    id?: StringFilter<"UserBehavior"> | string
    userId?: StringFilter<"UserBehavior"> | string
    sessionId?: StringFilter<"UserBehavior"> | string
    actionType?: StringFilter<"UserBehavior"> | string
    pageUrl?: StringNullableFilter<"UserBehavior"> | string | null
    elementClicked?: StringNullableFilter<"UserBehavior"> | string | null
    timeSpent?: IntNullableFilter<"UserBehavior"> | number | null
    hesitationTime?: IntNullableFilter<"UserBehavior"> | number | null
    metadata?: StringNullableFilter<"UserBehavior"> | string | null
    createdAt?: DateTimeFilter<"UserBehavior"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserBehaviorOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    actionType?: SortOrder
    pageUrl?: SortOrderInput | SortOrder
    elementClicked?: SortOrderInput | SortOrder
    timeSpent?: SortOrderInput | SortOrder
    hesitationTime?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserBehaviorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserBehaviorWhereInput | UserBehaviorWhereInput[]
    OR?: UserBehaviorWhereInput[]
    NOT?: UserBehaviorWhereInput | UserBehaviorWhereInput[]
    userId?: StringFilter<"UserBehavior"> | string
    sessionId?: StringFilter<"UserBehavior"> | string
    actionType?: StringFilter<"UserBehavior"> | string
    pageUrl?: StringNullableFilter<"UserBehavior"> | string | null
    elementClicked?: StringNullableFilter<"UserBehavior"> | string | null
    timeSpent?: IntNullableFilter<"UserBehavior"> | number | null
    hesitationTime?: IntNullableFilter<"UserBehavior"> | number | null
    metadata?: StringNullableFilter<"UserBehavior"> | string | null
    createdAt?: DateTimeFilter<"UserBehavior"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserBehaviorOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    actionType?: SortOrder
    pageUrl?: SortOrderInput | SortOrder
    elementClicked?: SortOrderInput | SortOrder
    timeSpent?: SortOrderInput | SortOrder
    hesitationTime?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserBehaviorCountOrderByAggregateInput
    _avg?: UserBehaviorAvgOrderByAggregateInput
    _max?: UserBehaviorMaxOrderByAggregateInput
    _min?: UserBehaviorMinOrderByAggregateInput
    _sum?: UserBehaviorSumOrderByAggregateInput
  }

  export type UserBehaviorScalarWhereWithAggregatesInput = {
    AND?: UserBehaviorScalarWhereWithAggregatesInput | UserBehaviorScalarWhereWithAggregatesInput[]
    OR?: UserBehaviorScalarWhereWithAggregatesInput[]
    NOT?: UserBehaviorScalarWhereWithAggregatesInput | UserBehaviorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserBehavior"> | string
    userId?: StringWithAggregatesFilter<"UserBehavior"> | string
    sessionId?: StringWithAggregatesFilter<"UserBehavior"> | string
    actionType?: StringWithAggregatesFilter<"UserBehavior"> | string
    pageUrl?: StringNullableWithAggregatesFilter<"UserBehavior"> | string | null
    elementClicked?: StringNullableWithAggregatesFilter<"UserBehavior"> | string | null
    timeSpent?: IntNullableWithAggregatesFilter<"UserBehavior"> | number | null
    hesitationTime?: IntNullableWithAggregatesFilter<"UserBehavior"> | number | null
    metadata?: StringNullableWithAggregatesFilter<"UserBehavior"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserBehavior"> | Date | string
  }

  export type AlgorithmPerformanceWhereInput = {
    AND?: AlgorithmPerformanceWhereInput | AlgorithmPerformanceWhereInput[]
    OR?: AlgorithmPerformanceWhereInput[]
    NOT?: AlgorithmPerformanceWhereInput | AlgorithmPerformanceWhereInput[]
    id?: StringFilter<"AlgorithmPerformance"> | string
    userId?: StringFilter<"AlgorithmPerformance"> | string
    algorithmType?: StringFilter<"AlgorithmPerformance"> | string
    inputData?: StringFilter<"AlgorithmPerformance"> | string
    outputData?: StringFilter<"AlgorithmPerformance"> | string
    userSatisfaction?: IntNullableFilter<"AlgorithmPerformance"> | number | null
    processingTime?: IntFilter<"AlgorithmPerformance"> | number
    createdAt?: DateTimeFilter<"AlgorithmPerformance"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AlgorithmPerformanceOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    algorithmType?: SortOrder
    inputData?: SortOrder
    outputData?: SortOrder
    userSatisfaction?: SortOrderInput | SortOrder
    processingTime?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AlgorithmPerformanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlgorithmPerformanceWhereInput | AlgorithmPerformanceWhereInput[]
    OR?: AlgorithmPerformanceWhereInput[]
    NOT?: AlgorithmPerformanceWhereInput | AlgorithmPerformanceWhereInput[]
    userId?: StringFilter<"AlgorithmPerformance"> | string
    algorithmType?: StringFilter<"AlgorithmPerformance"> | string
    inputData?: StringFilter<"AlgorithmPerformance"> | string
    outputData?: StringFilter<"AlgorithmPerformance"> | string
    userSatisfaction?: IntNullableFilter<"AlgorithmPerformance"> | number | null
    processingTime?: IntFilter<"AlgorithmPerformance"> | number
    createdAt?: DateTimeFilter<"AlgorithmPerformance"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AlgorithmPerformanceOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    algorithmType?: SortOrder
    inputData?: SortOrder
    outputData?: SortOrder
    userSatisfaction?: SortOrderInput | SortOrder
    processingTime?: SortOrder
    createdAt?: SortOrder
    _count?: AlgorithmPerformanceCountOrderByAggregateInput
    _avg?: AlgorithmPerformanceAvgOrderByAggregateInput
    _max?: AlgorithmPerformanceMaxOrderByAggregateInput
    _min?: AlgorithmPerformanceMinOrderByAggregateInput
    _sum?: AlgorithmPerformanceSumOrderByAggregateInput
  }

  export type AlgorithmPerformanceScalarWhereWithAggregatesInput = {
    AND?: AlgorithmPerformanceScalarWhereWithAggregatesInput | AlgorithmPerformanceScalarWhereWithAggregatesInput[]
    OR?: AlgorithmPerformanceScalarWhereWithAggregatesInput[]
    NOT?: AlgorithmPerformanceScalarWhereWithAggregatesInput | AlgorithmPerformanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AlgorithmPerformance"> | string
    userId?: StringWithAggregatesFilter<"AlgorithmPerformance"> | string
    algorithmType?: StringWithAggregatesFilter<"AlgorithmPerformance"> | string
    inputData?: StringWithAggregatesFilter<"AlgorithmPerformance"> | string
    outputData?: StringWithAggregatesFilter<"AlgorithmPerformance"> | string
    userSatisfaction?: IntNullableWithAggregatesFilter<"AlgorithmPerformance"> | number | null
    processingTime?: IntWithAggregatesFilter<"AlgorithmPerformance"> | number
    createdAt?: DateTimeWithAggregatesFilter<"AlgorithmPerformance"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash?: string | null
    name?: string | null
    age?: number | null
    personalityType?: string | null
    anxietyLevel?: number | null
    provider?: string | null
    providerId?: string | null
    isEmailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    decisions?: DecisionCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorCreateNestedManyWithoutUserInput
    algorithmPerfs?: AlgorithmPerformanceCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash?: string | null
    name?: string | null
    age?: number | null
    personalityType?: string | null
    anxietyLevel?: number | null
    provider?: string | null
    providerId?: string | null
    isEmailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    decisions?: DecisionUncheckedCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutUserInput
    algorithmPerfs?: AlgorithmPerformanceUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    personalityType?: NullableStringFieldUpdateOperationsInput | string | null
    anxietyLevel?: NullableIntFieldUpdateOperationsInput | number | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    decisions?: DecisionUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutUserNestedInput
    algorithmPerfs?: AlgorithmPerformanceUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    personalityType?: NullableStringFieldUpdateOperationsInput | string | null
    anxietyLevel?: NullableIntFieldUpdateOperationsInput | number | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    decisions?: DecisionUncheckedUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutUserNestedInput
    algorithmPerfs?: AlgorithmPerformanceUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash?: string | null
    name?: string | null
    age?: number | null
    personalityType?: string | null
    anxietyLevel?: number | null
    provider?: string | null
    providerId?: string | null
    isEmailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    personalityType?: NullableStringFieldUpdateOperationsInput | string | null
    anxietyLevel?: NullableIntFieldUpdateOperationsInput | number | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    personalityType?: NullableStringFieldUpdateOperationsInput | string | null
    anxietyLevel?: NullableIntFieldUpdateOperationsInput | number | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type UserSessionUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type UserSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type UserSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateManyInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type UserSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DecisionCreateInput = {
    id?: string
    decisionType: string
    title: string
    description?: string | null
    chosenOption?: string | null
    confidenceScore?: number | null
    outcomeRating?: number | null
    contextData?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutDecisionsInput
    options?: DecisionOptionCreateNestedManyWithoutDecisionInput
  }

  export type DecisionUncheckedCreateInput = {
    id?: string
    userId: string
    decisionType: string
    title: string
    description?: string | null
    chosenOption?: string | null
    confidenceScore?: number | null
    outcomeRating?: number | null
    contextData?: string | null
    createdAt?: Date | string
    options?: DecisionOptionUncheckedCreateNestedManyWithoutDecisionInput
  }

  export type DecisionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    decisionType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    chosenOption?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    outcomeRating?: NullableIntFieldUpdateOperationsInput | number | null
    contextData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDecisionsNestedInput
    options?: DecisionOptionUpdateManyWithoutDecisionNestedInput
  }

  export type DecisionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    decisionType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    chosenOption?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    outcomeRating?: NullableIntFieldUpdateOperationsInput | number | null
    contextData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: DecisionOptionUncheckedUpdateManyWithoutDecisionNestedInput
  }

  export type DecisionCreateManyInput = {
    id?: string
    userId: string
    decisionType: string
    title: string
    description?: string | null
    chosenOption?: string | null
    confidenceScore?: number | null
    outcomeRating?: number | null
    contextData?: string | null
    createdAt?: Date | string
  }

  export type DecisionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    decisionType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    chosenOption?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    outcomeRating?: NullableIntFieldUpdateOperationsInput | number | null
    contextData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DecisionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    decisionType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    chosenOption?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    outcomeRating?: NullableIntFieldUpdateOperationsInput | number | null
    contextData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DecisionOptionCreateInput = {
    id?: string
    optionText: string
    userRating?: number | null
    aiScore?: number | null
    criteriaScores?: string | null
    createdAt?: Date | string
    decision: DecisionCreateNestedOneWithoutOptionsInput
  }

  export type DecisionOptionUncheckedCreateInput = {
    id?: string
    decisionId: string
    optionText: string
    userRating?: number | null
    aiScore?: number | null
    criteriaScores?: string | null
    createdAt?: Date | string
  }

  export type DecisionOptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    optionText?: StringFieldUpdateOperationsInput | string
    userRating?: NullableIntFieldUpdateOperationsInput | number | null
    aiScore?: NullableFloatFieldUpdateOperationsInput | number | null
    criteriaScores?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    decision?: DecisionUpdateOneRequiredWithoutOptionsNestedInput
  }

  export type DecisionOptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    decisionId?: StringFieldUpdateOperationsInput | string
    optionText?: StringFieldUpdateOperationsInput | string
    userRating?: NullableIntFieldUpdateOperationsInput | number | null
    aiScore?: NullableFloatFieldUpdateOperationsInput | number | null
    criteriaScores?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DecisionOptionCreateManyInput = {
    id?: string
    decisionId: string
    optionText: string
    userRating?: number | null
    aiScore?: number | null
    criteriaScores?: string | null
    createdAt?: Date | string
  }

  export type DecisionOptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    optionText?: StringFieldUpdateOperationsInput | string
    userRating?: NullableIntFieldUpdateOperationsInput | number | null
    aiScore?: NullableFloatFieldUpdateOperationsInput | number | null
    criteriaScores?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DecisionOptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    decisionId?: StringFieldUpdateOperationsInput | string
    optionText?: StringFieldUpdateOperationsInput | string
    userRating?: NullableIntFieldUpdateOperationsInput | number | null
    aiScore?: NullableFloatFieldUpdateOperationsInput | number | null
    criteriaScores?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBehaviorCreateInput = {
    id?: string
    sessionId: string
    actionType: string
    pageUrl?: string | null
    elementClicked?: string | null
    timeSpent?: number | null
    hesitationTime?: number | null
    metadata?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBehaviorsInput
  }

  export type UserBehaviorUncheckedCreateInput = {
    id?: string
    userId: string
    sessionId: string
    actionType: string
    pageUrl?: string | null
    elementClicked?: string | null
    timeSpent?: number | null
    hesitationTime?: number | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type UserBehaviorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    pageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    elementClicked?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    hesitationTime?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBehaviorsNestedInput
  }

  export type UserBehaviorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    pageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    elementClicked?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    hesitationTime?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBehaviorCreateManyInput = {
    id?: string
    userId: string
    sessionId: string
    actionType: string
    pageUrl?: string | null
    elementClicked?: string | null
    timeSpent?: number | null
    hesitationTime?: number | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type UserBehaviorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    pageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    elementClicked?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    hesitationTime?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBehaviorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    pageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    elementClicked?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    hesitationTime?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlgorithmPerformanceCreateInput = {
    id?: string
    algorithmType: string
    inputData: string
    outputData: string
    userSatisfaction?: number | null
    processingTime: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAlgorithmPerfsInput
  }

  export type AlgorithmPerformanceUncheckedCreateInput = {
    id?: string
    userId: string
    algorithmType: string
    inputData: string
    outputData: string
    userSatisfaction?: number | null
    processingTime: number
    createdAt?: Date | string
  }

  export type AlgorithmPerformanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    algorithmType?: StringFieldUpdateOperationsInput | string
    inputData?: StringFieldUpdateOperationsInput | string
    outputData?: StringFieldUpdateOperationsInput | string
    userSatisfaction?: NullableIntFieldUpdateOperationsInput | number | null
    processingTime?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAlgorithmPerfsNestedInput
  }

  export type AlgorithmPerformanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    algorithmType?: StringFieldUpdateOperationsInput | string
    inputData?: StringFieldUpdateOperationsInput | string
    outputData?: StringFieldUpdateOperationsInput | string
    userSatisfaction?: NullableIntFieldUpdateOperationsInput | number | null
    processingTime?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlgorithmPerformanceCreateManyInput = {
    id?: string
    userId: string
    algorithmType: string
    inputData: string
    outputData: string
    userSatisfaction?: number | null
    processingTime: number
    createdAt?: Date | string
  }

  export type AlgorithmPerformanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    algorithmType?: StringFieldUpdateOperationsInput | string
    inputData?: StringFieldUpdateOperationsInput | string
    outputData?: StringFieldUpdateOperationsInput | string
    userSatisfaction?: NullableIntFieldUpdateOperationsInput | number | null
    processingTime?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlgorithmPerformanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    algorithmType?: StringFieldUpdateOperationsInput | string
    inputData?: StringFieldUpdateOperationsInput | string
    outputData?: StringFieldUpdateOperationsInput | string
    userSatisfaction?: NullableIntFieldUpdateOperationsInput | number | null
    processingTime?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DecisionListRelationFilter = {
    every?: DecisionWhereInput
    some?: DecisionWhereInput
    none?: DecisionWhereInput
  }

  export type UserBehaviorListRelationFilter = {
    every?: UserBehaviorWhereInput
    some?: UserBehaviorWhereInput
    none?: UserBehaviorWhereInput
  }

  export type AlgorithmPerformanceListRelationFilter = {
    every?: AlgorithmPerformanceWhereInput
    some?: AlgorithmPerformanceWhereInput
    none?: AlgorithmPerformanceWhereInput
  }

  export type UserSessionListRelationFilter = {
    every?: UserSessionWhereInput
    some?: UserSessionWhereInput
    none?: UserSessionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DecisionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserBehaviorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlgorithmPerformanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    age?: SortOrder
    personalityType?: SortOrder
    anxietyLevel?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    isEmailVerified?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    age?: SortOrder
    anxietyLevel?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    age?: SortOrder
    personalityType?: SortOrder
    anxietyLevel?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    isEmailVerified?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    age?: SortOrder
    personalityType?: SortOrder
    anxietyLevel?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    isEmailVerified?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    age?: SortOrder
    anxietyLevel?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DecisionOptionListRelationFilter = {
    every?: DecisionOptionWhereInput
    some?: DecisionOptionWhereInput
    none?: DecisionOptionWhereInput
  }

  export type DecisionOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DecisionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    decisionType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    chosenOption?: SortOrder
    confidenceScore?: SortOrder
    outcomeRating?: SortOrder
    contextData?: SortOrder
    createdAt?: SortOrder
  }

  export type DecisionAvgOrderByAggregateInput = {
    confidenceScore?: SortOrder
    outcomeRating?: SortOrder
  }

  export type DecisionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    decisionType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    chosenOption?: SortOrder
    confidenceScore?: SortOrder
    outcomeRating?: SortOrder
    contextData?: SortOrder
    createdAt?: SortOrder
  }

  export type DecisionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    decisionType?: SortOrder
    title?: SortOrder
    description?: SortOrder
    chosenOption?: SortOrder
    confidenceScore?: SortOrder
    outcomeRating?: SortOrder
    contextData?: SortOrder
    createdAt?: SortOrder
  }

  export type DecisionSumOrderByAggregateInput = {
    confidenceScore?: SortOrder
    outcomeRating?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DecisionRelationFilter = {
    is?: DecisionWhereInput
    isNot?: DecisionWhereInput
  }

  export type DecisionOptionCountOrderByAggregateInput = {
    id?: SortOrder
    decisionId?: SortOrder
    optionText?: SortOrder
    userRating?: SortOrder
    aiScore?: SortOrder
    criteriaScores?: SortOrder
    createdAt?: SortOrder
  }

  export type DecisionOptionAvgOrderByAggregateInput = {
    userRating?: SortOrder
    aiScore?: SortOrder
  }

  export type DecisionOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    decisionId?: SortOrder
    optionText?: SortOrder
    userRating?: SortOrder
    aiScore?: SortOrder
    criteriaScores?: SortOrder
    createdAt?: SortOrder
  }

  export type DecisionOptionMinOrderByAggregateInput = {
    id?: SortOrder
    decisionId?: SortOrder
    optionText?: SortOrder
    userRating?: SortOrder
    aiScore?: SortOrder
    criteriaScores?: SortOrder
    createdAt?: SortOrder
  }

  export type DecisionOptionSumOrderByAggregateInput = {
    userRating?: SortOrder
    aiScore?: SortOrder
  }

  export type UserBehaviorCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    actionType?: SortOrder
    pageUrl?: SortOrder
    elementClicked?: SortOrder
    timeSpent?: SortOrder
    hesitationTime?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type UserBehaviorAvgOrderByAggregateInput = {
    timeSpent?: SortOrder
    hesitationTime?: SortOrder
  }

  export type UserBehaviorMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    actionType?: SortOrder
    pageUrl?: SortOrder
    elementClicked?: SortOrder
    timeSpent?: SortOrder
    hesitationTime?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type UserBehaviorMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    actionType?: SortOrder
    pageUrl?: SortOrder
    elementClicked?: SortOrder
    timeSpent?: SortOrder
    hesitationTime?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type UserBehaviorSumOrderByAggregateInput = {
    timeSpent?: SortOrder
    hesitationTime?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AlgorithmPerformanceCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    algorithmType?: SortOrder
    inputData?: SortOrder
    outputData?: SortOrder
    userSatisfaction?: SortOrder
    processingTime?: SortOrder
    createdAt?: SortOrder
  }

  export type AlgorithmPerformanceAvgOrderByAggregateInput = {
    userSatisfaction?: SortOrder
    processingTime?: SortOrder
  }

  export type AlgorithmPerformanceMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    algorithmType?: SortOrder
    inputData?: SortOrder
    outputData?: SortOrder
    userSatisfaction?: SortOrder
    processingTime?: SortOrder
    createdAt?: SortOrder
  }

  export type AlgorithmPerformanceMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    algorithmType?: SortOrder
    inputData?: SortOrder
    outputData?: SortOrder
    userSatisfaction?: SortOrder
    processingTime?: SortOrder
    createdAt?: SortOrder
  }

  export type AlgorithmPerformanceSumOrderByAggregateInput = {
    userSatisfaction?: SortOrder
    processingTime?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DecisionCreateNestedManyWithoutUserInput = {
    create?: XOR<DecisionCreateWithoutUserInput, DecisionUncheckedCreateWithoutUserInput> | DecisionCreateWithoutUserInput[] | DecisionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DecisionCreateOrConnectWithoutUserInput | DecisionCreateOrConnectWithoutUserInput[]
    createMany?: DecisionCreateManyUserInputEnvelope
    connect?: DecisionWhereUniqueInput | DecisionWhereUniqueInput[]
  }

  export type UserBehaviorCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBehaviorCreateWithoutUserInput, UserBehaviorUncheckedCreateWithoutUserInput> | UserBehaviorCreateWithoutUserInput[] | UserBehaviorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBehaviorCreateOrConnectWithoutUserInput | UserBehaviorCreateOrConnectWithoutUserInput[]
    createMany?: UserBehaviorCreateManyUserInputEnvelope
    connect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
  }

  export type AlgorithmPerformanceCreateNestedManyWithoutUserInput = {
    create?: XOR<AlgorithmPerformanceCreateWithoutUserInput, AlgorithmPerformanceUncheckedCreateWithoutUserInput> | AlgorithmPerformanceCreateWithoutUserInput[] | AlgorithmPerformanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlgorithmPerformanceCreateOrConnectWithoutUserInput | AlgorithmPerformanceCreateOrConnectWithoutUserInput[]
    createMany?: AlgorithmPerformanceCreateManyUserInputEnvelope
    connect?: AlgorithmPerformanceWhereUniqueInput | AlgorithmPerformanceWhereUniqueInput[]
  }

  export type UserSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type DecisionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DecisionCreateWithoutUserInput, DecisionUncheckedCreateWithoutUserInput> | DecisionCreateWithoutUserInput[] | DecisionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DecisionCreateOrConnectWithoutUserInput | DecisionCreateOrConnectWithoutUserInput[]
    createMany?: DecisionCreateManyUserInputEnvelope
    connect?: DecisionWhereUniqueInput | DecisionWhereUniqueInput[]
  }

  export type UserBehaviorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBehaviorCreateWithoutUserInput, UserBehaviorUncheckedCreateWithoutUserInput> | UserBehaviorCreateWithoutUserInput[] | UserBehaviorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBehaviorCreateOrConnectWithoutUserInput | UserBehaviorCreateOrConnectWithoutUserInput[]
    createMany?: UserBehaviorCreateManyUserInputEnvelope
    connect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
  }

  export type AlgorithmPerformanceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AlgorithmPerformanceCreateWithoutUserInput, AlgorithmPerformanceUncheckedCreateWithoutUserInput> | AlgorithmPerformanceCreateWithoutUserInput[] | AlgorithmPerformanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlgorithmPerformanceCreateOrConnectWithoutUserInput | AlgorithmPerformanceCreateOrConnectWithoutUserInput[]
    createMany?: AlgorithmPerformanceCreateManyUserInputEnvelope
    connect?: AlgorithmPerformanceWhereUniqueInput | AlgorithmPerformanceWhereUniqueInput[]
  }

  export type UserSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DecisionUpdateManyWithoutUserNestedInput = {
    create?: XOR<DecisionCreateWithoutUserInput, DecisionUncheckedCreateWithoutUserInput> | DecisionCreateWithoutUserInput[] | DecisionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DecisionCreateOrConnectWithoutUserInput | DecisionCreateOrConnectWithoutUserInput[]
    upsert?: DecisionUpsertWithWhereUniqueWithoutUserInput | DecisionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DecisionCreateManyUserInputEnvelope
    set?: DecisionWhereUniqueInput | DecisionWhereUniqueInput[]
    disconnect?: DecisionWhereUniqueInput | DecisionWhereUniqueInput[]
    delete?: DecisionWhereUniqueInput | DecisionWhereUniqueInput[]
    connect?: DecisionWhereUniqueInput | DecisionWhereUniqueInput[]
    update?: DecisionUpdateWithWhereUniqueWithoutUserInput | DecisionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DecisionUpdateManyWithWhereWithoutUserInput | DecisionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DecisionScalarWhereInput | DecisionScalarWhereInput[]
  }

  export type UserBehaviorUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBehaviorCreateWithoutUserInput, UserBehaviorUncheckedCreateWithoutUserInput> | UserBehaviorCreateWithoutUserInput[] | UserBehaviorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBehaviorCreateOrConnectWithoutUserInput | UserBehaviorCreateOrConnectWithoutUserInput[]
    upsert?: UserBehaviorUpsertWithWhereUniqueWithoutUserInput | UserBehaviorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBehaviorCreateManyUserInputEnvelope
    set?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    disconnect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    delete?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    connect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    update?: UserBehaviorUpdateWithWhereUniqueWithoutUserInput | UserBehaviorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBehaviorUpdateManyWithWhereWithoutUserInput | UserBehaviorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBehaviorScalarWhereInput | UserBehaviorScalarWhereInput[]
  }

  export type AlgorithmPerformanceUpdateManyWithoutUserNestedInput = {
    create?: XOR<AlgorithmPerformanceCreateWithoutUserInput, AlgorithmPerformanceUncheckedCreateWithoutUserInput> | AlgorithmPerformanceCreateWithoutUserInput[] | AlgorithmPerformanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlgorithmPerformanceCreateOrConnectWithoutUserInput | AlgorithmPerformanceCreateOrConnectWithoutUserInput[]
    upsert?: AlgorithmPerformanceUpsertWithWhereUniqueWithoutUserInput | AlgorithmPerformanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AlgorithmPerformanceCreateManyUserInputEnvelope
    set?: AlgorithmPerformanceWhereUniqueInput | AlgorithmPerformanceWhereUniqueInput[]
    disconnect?: AlgorithmPerformanceWhereUniqueInput | AlgorithmPerformanceWhereUniqueInput[]
    delete?: AlgorithmPerformanceWhereUniqueInput | AlgorithmPerformanceWhereUniqueInput[]
    connect?: AlgorithmPerformanceWhereUniqueInput | AlgorithmPerformanceWhereUniqueInput[]
    update?: AlgorithmPerformanceUpdateWithWhereUniqueWithoutUserInput | AlgorithmPerformanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AlgorithmPerformanceUpdateManyWithWhereWithoutUserInput | AlgorithmPerformanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AlgorithmPerformanceScalarWhereInput | AlgorithmPerformanceScalarWhereInput[]
  }

  export type UserSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type DecisionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DecisionCreateWithoutUserInput, DecisionUncheckedCreateWithoutUserInput> | DecisionCreateWithoutUserInput[] | DecisionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DecisionCreateOrConnectWithoutUserInput | DecisionCreateOrConnectWithoutUserInput[]
    upsert?: DecisionUpsertWithWhereUniqueWithoutUserInput | DecisionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DecisionCreateManyUserInputEnvelope
    set?: DecisionWhereUniqueInput | DecisionWhereUniqueInput[]
    disconnect?: DecisionWhereUniqueInput | DecisionWhereUniqueInput[]
    delete?: DecisionWhereUniqueInput | DecisionWhereUniqueInput[]
    connect?: DecisionWhereUniqueInput | DecisionWhereUniqueInput[]
    update?: DecisionUpdateWithWhereUniqueWithoutUserInput | DecisionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DecisionUpdateManyWithWhereWithoutUserInput | DecisionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DecisionScalarWhereInput | DecisionScalarWhereInput[]
  }

  export type UserBehaviorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBehaviorCreateWithoutUserInput, UserBehaviorUncheckedCreateWithoutUserInput> | UserBehaviorCreateWithoutUserInput[] | UserBehaviorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBehaviorCreateOrConnectWithoutUserInput | UserBehaviorCreateOrConnectWithoutUserInput[]
    upsert?: UserBehaviorUpsertWithWhereUniqueWithoutUserInput | UserBehaviorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBehaviorCreateManyUserInputEnvelope
    set?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    disconnect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    delete?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    connect?: UserBehaviorWhereUniqueInput | UserBehaviorWhereUniqueInput[]
    update?: UserBehaviorUpdateWithWhereUniqueWithoutUserInput | UserBehaviorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBehaviorUpdateManyWithWhereWithoutUserInput | UserBehaviorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBehaviorScalarWhereInput | UserBehaviorScalarWhereInput[]
  }

  export type AlgorithmPerformanceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AlgorithmPerformanceCreateWithoutUserInput, AlgorithmPerformanceUncheckedCreateWithoutUserInput> | AlgorithmPerformanceCreateWithoutUserInput[] | AlgorithmPerformanceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlgorithmPerformanceCreateOrConnectWithoutUserInput | AlgorithmPerformanceCreateOrConnectWithoutUserInput[]
    upsert?: AlgorithmPerformanceUpsertWithWhereUniqueWithoutUserInput | AlgorithmPerformanceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AlgorithmPerformanceCreateManyUserInputEnvelope
    set?: AlgorithmPerformanceWhereUniqueInput | AlgorithmPerformanceWhereUniqueInput[]
    disconnect?: AlgorithmPerformanceWhereUniqueInput | AlgorithmPerformanceWhereUniqueInput[]
    delete?: AlgorithmPerformanceWhereUniqueInput | AlgorithmPerformanceWhereUniqueInput[]
    connect?: AlgorithmPerformanceWhereUniqueInput | AlgorithmPerformanceWhereUniqueInput[]
    update?: AlgorithmPerformanceUpdateWithWhereUniqueWithoutUserInput | AlgorithmPerformanceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AlgorithmPerformanceUpdateManyWithWhereWithoutUserInput | AlgorithmPerformanceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AlgorithmPerformanceScalarWhereInput | AlgorithmPerformanceScalarWhereInput[]
  }

  export type UserSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutDecisionsInput = {
    create?: XOR<UserCreateWithoutDecisionsInput, UserUncheckedCreateWithoutDecisionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDecisionsInput
    connect?: UserWhereUniqueInput
  }

  export type DecisionOptionCreateNestedManyWithoutDecisionInput = {
    create?: XOR<DecisionOptionCreateWithoutDecisionInput, DecisionOptionUncheckedCreateWithoutDecisionInput> | DecisionOptionCreateWithoutDecisionInput[] | DecisionOptionUncheckedCreateWithoutDecisionInput[]
    connectOrCreate?: DecisionOptionCreateOrConnectWithoutDecisionInput | DecisionOptionCreateOrConnectWithoutDecisionInput[]
    createMany?: DecisionOptionCreateManyDecisionInputEnvelope
    connect?: DecisionOptionWhereUniqueInput | DecisionOptionWhereUniqueInput[]
  }

  export type DecisionOptionUncheckedCreateNestedManyWithoutDecisionInput = {
    create?: XOR<DecisionOptionCreateWithoutDecisionInput, DecisionOptionUncheckedCreateWithoutDecisionInput> | DecisionOptionCreateWithoutDecisionInput[] | DecisionOptionUncheckedCreateWithoutDecisionInput[]
    connectOrCreate?: DecisionOptionCreateOrConnectWithoutDecisionInput | DecisionOptionCreateOrConnectWithoutDecisionInput[]
    createMany?: DecisionOptionCreateManyDecisionInputEnvelope
    connect?: DecisionOptionWhereUniqueInput | DecisionOptionWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutDecisionsNestedInput = {
    create?: XOR<UserCreateWithoutDecisionsInput, UserUncheckedCreateWithoutDecisionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDecisionsInput
    upsert?: UserUpsertWithoutDecisionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDecisionsInput, UserUpdateWithoutDecisionsInput>, UserUncheckedUpdateWithoutDecisionsInput>
  }

  export type DecisionOptionUpdateManyWithoutDecisionNestedInput = {
    create?: XOR<DecisionOptionCreateWithoutDecisionInput, DecisionOptionUncheckedCreateWithoutDecisionInput> | DecisionOptionCreateWithoutDecisionInput[] | DecisionOptionUncheckedCreateWithoutDecisionInput[]
    connectOrCreate?: DecisionOptionCreateOrConnectWithoutDecisionInput | DecisionOptionCreateOrConnectWithoutDecisionInput[]
    upsert?: DecisionOptionUpsertWithWhereUniqueWithoutDecisionInput | DecisionOptionUpsertWithWhereUniqueWithoutDecisionInput[]
    createMany?: DecisionOptionCreateManyDecisionInputEnvelope
    set?: DecisionOptionWhereUniqueInput | DecisionOptionWhereUniqueInput[]
    disconnect?: DecisionOptionWhereUniqueInput | DecisionOptionWhereUniqueInput[]
    delete?: DecisionOptionWhereUniqueInput | DecisionOptionWhereUniqueInput[]
    connect?: DecisionOptionWhereUniqueInput | DecisionOptionWhereUniqueInput[]
    update?: DecisionOptionUpdateWithWhereUniqueWithoutDecisionInput | DecisionOptionUpdateWithWhereUniqueWithoutDecisionInput[]
    updateMany?: DecisionOptionUpdateManyWithWhereWithoutDecisionInput | DecisionOptionUpdateManyWithWhereWithoutDecisionInput[]
    deleteMany?: DecisionOptionScalarWhereInput | DecisionOptionScalarWhereInput[]
  }

  export type DecisionOptionUncheckedUpdateManyWithoutDecisionNestedInput = {
    create?: XOR<DecisionOptionCreateWithoutDecisionInput, DecisionOptionUncheckedCreateWithoutDecisionInput> | DecisionOptionCreateWithoutDecisionInput[] | DecisionOptionUncheckedCreateWithoutDecisionInput[]
    connectOrCreate?: DecisionOptionCreateOrConnectWithoutDecisionInput | DecisionOptionCreateOrConnectWithoutDecisionInput[]
    upsert?: DecisionOptionUpsertWithWhereUniqueWithoutDecisionInput | DecisionOptionUpsertWithWhereUniqueWithoutDecisionInput[]
    createMany?: DecisionOptionCreateManyDecisionInputEnvelope
    set?: DecisionOptionWhereUniqueInput | DecisionOptionWhereUniqueInput[]
    disconnect?: DecisionOptionWhereUniqueInput | DecisionOptionWhereUniqueInput[]
    delete?: DecisionOptionWhereUniqueInput | DecisionOptionWhereUniqueInput[]
    connect?: DecisionOptionWhereUniqueInput | DecisionOptionWhereUniqueInput[]
    update?: DecisionOptionUpdateWithWhereUniqueWithoutDecisionInput | DecisionOptionUpdateWithWhereUniqueWithoutDecisionInput[]
    updateMany?: DecisionOptionUpdateManyWithWhereWithoutDecisionInput | DecisionOptionUpdateManyWithWhereWithoutDecisionInput[]
    deleteMany?: DecisionOptionScalarWhereInput | DecisionOptionScalarWhereInput[]
  }

  export type DecisionCreateNestedOneWithoutOptionsInput = {
    create?: XOR<DecisionCreateWithoutOptionsInput, DecisionUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: DecisionCreateOrConnectWithoutOptionsInput
    connect?: DecisionWhereUniqueInput
  }

  export type DecisionUpdateOneRequiredWithoutOptionsNestedInput = {
    create?: XOR<DecisionCreateWithoutOptionsInput, DecisionUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: DecisionCreateOrConnectWithoutOptionsInput
    upsert?: DecisionUpsertWithoutOptionsInput
    connect?: DecisionWhereUniqueInput
    update?: XOR<XOR<DecisionUpdateToOneWithWhereWithoutOptionsInput, DecisionUpdateWithoutOptionsInput>, DecisionUncheckedUpdateWithoutOptionsInput>
  }

  export type UserCreateNestedOneWithoutBehaviorsInput = {
    create?: XOR<UserCreateWithoutBehaviorsInput, UserUncheckedCreateWithoutBehaviorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBehaviorsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBehaviorsNestedInput = {
    create?: XOR<UserCreateWithoutBehaviorsInput, UserUncheckedCreateWithoutBehaviorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBehaviorsInput
    upsert?: UserUpsertWithoutBehaviorsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBehaviorsInput, UserUpdateWithoutBehaviorsInput>, UserUncheckedUpdateWithoutBehaviorsInput>
  }

  export type UserCreateNestedOneWithoutAlgorithmPerfsInput = {
    create?: XOR<UserCreateWithoutAlgorithmPerfsInput, UserUncheckedCreateWithoutAlgorithmPerfsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlgorithmPerfsInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAlgorithmPerfsNestedInput = {
    create?: XOR<UserCreateWithoutAlgorithmPerfsInput, UserUncheckedCreateWithoutAlgorithmPerfsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlgorithmPerfsInput
    upsert?: UserUpsertWithoutAlgorithmPerfsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAlgorithmPerfsInput, UserUpdateWithoutAlgorithmPerfsInput>, UserUncheckedUpdateWithoutAlgorithmPerfsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DecisionCreateWithoutUserInput = {
    id?: string
    decisionType: string
    title: string
    description?: string | null
    chosenOption?: string | null
    confidenceScore?: number | null
    outcomeRating?: number | null
    contextData?: string | null
    createdAt?: Date | string
    options?: DecisionOptionCreateNestedManyWithoutDecisionInput
  }

  export type DecisionUncheckedCreateWithoutUserInput = {
    id?: string
    decisionType: string
    title: string
    description?: string | null
    chosenOption?: string | null
    confidenceScore?: number | null
    outcomeRating?: number | null
    contextData?: string | null
    createdAt?: Date | string
    options?: DecisionOptionUncheckedCreateNestedManyWithoutDecisionInput
  }

  export type DecisionCreateOrConnectWithoutUserInput = {
    where: DecisionWhereUniqueInput
    create: XOR<DecisionCreateWithoutUserInput, DecisionUncheckedCreateWithoutUserInput>
  }

  export type DecisionCreateManyUserInputEnvelope = {
    data: DecisionCreateManyUserInput | DecisionCreateManyUserInput[]
  }

  export type UserBehaviorCreateWithoutUserInput = {
    id?: string
    sessionId: string
    actionType: string
    pageUrl?: string | null
    elementClicked?: string | null
    timeSpent?: number | null
    hesitationTime?: number | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type UserBehaviorUncheckedCreateWithoutUserInput = {
    id?: string
    sessionId: string
    actionType: string
    pageUrl?: string | null
    elementClicked?: string | null
    timeSpent?: number | null
    hesitationTime?: number | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type UserBehaviorCreateOrConnectWithoutUserInput = {
    where: UserBehaviorWhereUniqueInput
    create: XOR<UserBehaviorCreateWithoutUserInput, UserBehaviorUncheckedCreateWithoutUserInput>
  }

  export type UserBehaviorCreateManyUserInputEnvelope = {
    data: UserBehaviorCreateManyUserInput | UserBehaviorCreateManyUserInput[]
  }

  export type AlgorithmPerformanceCreateWithoutUserInput = {
    id?: string
    algorithmType: string
    inputData: string
    outputData: string
    userSatisfaction?: number | null
    processingTime: number
    createdAt?: Date | string
  }

  export type AlgorithmPerformanceUncheckedCreateWithoutUserInput = {
    id?: string
    algorithmType: string
    inputData: string
    outputData: string
    userSatisfaction?: number | null
    processingTime: number
    createdAt?: Date | string
  }

  export type AlgorithmPerformanceCreateOrConnectWithoutUserInput = {
    where: AlgorithmPerformanceWhereUniqueInput
    create: XOR<AlgorithmPerformanceCreateWithoutUserInput, AlgorithmPerformanceUncheckedCreateWithoutUserInput>
  }

  export type AlgorithmPerformanceCreateManyUserInputEnvelope = {
    data: AlgorithmPerformanceCreateManyUserInput | AlgorithmPerformanceCreateManyUserInput[]
  }

  export type UserSessionCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type UserSessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type UserSessionCreateOrConnectWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionCreateManyUserInputEnvelope = {
    data: UserSessionCreateManyUserInput | UserSessionCreateManyUserInput[]
  }

  export type DecisionUpsertWithWhereUniqueWithoutUserInput = {
    where: DecisionWhereUniqueInput
    update: XOR<DecisionUpdateWithoutUserInput, DecisionUncheckedUpdateWithoutUserInput>
    create: XOR<DecisionCreateWithoutUserInput, DecisionUncheckedCreateWithoutUserInput>
  }

  export type DecisionUpdateWithWhereUniqueWithoutUserInput = {
    where: DecisionWhereUniqueInput
    data: XOR<DecisionUpdateWithoutUserInput, DecisionUncheckedUpdateWithoutUserInput>
  }

  export type DecisionUpdateManyWithWhereWithoutUserInput = {
    where: DecisionScalarWhereInput
    data: XOR<DecisionUpdateManyMutationInput, DecisionUncheckedUpdateManyWithoutUserInput>
  }

  export type DecisionScalarWhereInput = {
    AND?: DecisionScalarWhereInput | DecisionScalarWhereInput[]
    OR?: DecisionScalarWhereInput[]
    NOT?: DecisionScalarWhereInput | DecisionScalarWhereInput[]
    id?: StringFilter<"Decision"> | string
    userId?: StringFilter<"Decision"> | string
    decisionType?: StringFilter<"Decision"> | string
    title?: StringFilter<"Decision"> | string
    description?: StringNullableFilter<"Decision"> | string | null
    chosenOption?: StringNullableFilter<"Decision"> | string | null
    confidenceScore?: FloatNullableFilter<"Decision"> | number | null
    outcomeRating?: IntNullableFilter<"Decision"> | number | null
    contextData?: StringNullableFilter<"Decision"> | string | null
    createdAt?: DateTimeFilter<"Decision"> | Date | string
  }

  export type UserBehaviorUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBehaviorWhereUniqueInput
    update: XOR<UserBehaviorUpdateWithoutUserInput, UserBehaviorUncheckedUpdateWithoutUserInput>
    create: XOR<UserBehaviorCreateWithoutUserInput, UserBehaviorUncheckedCreateWithoutUserInput>
  }

  export type UserBehaviorUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBehaviorWhereUniqueInput
    data: XOR<UserBehaviorUpdateWithoutUserInput, UserBehaviorUncheckedUpdateWithoutUserInput>
  }

  export type UserBehaviorUpdateManyWithWhereWithoutUserInput = {
    where: UserBehaviorScalarWhereInput
    data: XOR<UserBehaviorUpdateManyMutationInput, UserBehaviorUncheckedUpdateManyWithoutUserInput>
  }

  export type UserBehaviorScalarWhereInput = {
    AND?: UserBehaviorScalarWhereInput | UserBehaviorScalarWhereInput[]
    OR?: UserBehaviorScalarWhereInput[]
    NOT?: UserBehaviorScalarWhereInput | UserBehaviorScalarWhereInput[]
    id?: StringFilter<"UserBehavior"> | string
    userId?: StringFilter<"UserBehavior"> | string
    sessionId?: StringFilter<"UserBehavior"> | string
    actionType?: StringFilter<"UserBehavior"> | string
    pageUrl?: StringNullableFilter<"UserBehavior"> | string | null
    elementClicked?: StringNullableFilter<"UserBehavior"> | string | null
    timeSpent?: IntNullableFilter<"UserBehavior"> | number | null
    hesitationTime?: IntNullableFilter<"UserBehavior"> | number | null
    metadata?: StringNullableFilter<"UserBehavior"> | string | null
    createdAt?: DateTimeFilter<"UserBehavior"> | Date | string
  }

  export type AlgorithmPerformanceUpsertWithWhereUniqueWithoutUserInput = {
    where: AlgorithmPerformanceWhereUniqueInput
    update: XOR<AlgorithmPerformanceUpdateWithoutUserInput, AlgorithmPerformanceUncheckedUpdateWithoutUserInput>
    create: XOR<AlgorithmPerformanceCreateWithoutUserInput, AlgorithmPerformanceUncheckedCreateWithoutUserInput>
  }

  export type AlgorithmPerformanceUpdateWithWhereUniqueWithoutUserInput = {
    where: AlgorithmPerformanceWhereUniqueInput
    data: XOR<AlgorithmPerformanceUpdateWithoutUserInput, AlgorithmPerformanceUncheckedUpdateWithoutUserInput>
  }

  export type AlgorithmPerformanceUpdateManyWithWhereWithoutUserInput = {
    where: AlgorithmPerformanceScalarWhereInput
    data: XOR<AlgorithmPerformanceUpdateManyMutationInput, AlgorithmPerformanceUncheckedUpdateManyWithoutUserInput>
  }

  export type AlgorithmPerformanceScalarWhereInput = {
    AND?: AlgorithmPerformanceScalarWhereInput | AlgorithmPerformanceScalarWhereInput[]
    OR?: AlgorithmPerformanceScalarWhereInput[]
    NOT?: AlgorithmPerformanceScalarWhereInput | AlgorithmPerformanceScalarWhereInput[]
    id?: StringFilter<"AlgorithmPerformance"> | string
    userId?: StringFilter<"AlgorithmPerformance"> | string
    algorithmType?: StringFilter<"AlgorithmPerformance"> | string
    inputData?: StringFilter<"AlgorithmPerformance"> | string
    outputData?: StringFilter<"AlgorithmPerformance"> | string
    userSatisfaction?: IntNullableFilter<"AlgorithmPerformance"> | number | null
    processingTime?: IntFilter<"AlgorithmPerformance"> | number
    createdAt?: DateTimeFilter<"AlgorithmPerformance"> | Date | string
  }

  export type UserSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    update: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    data: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionUpdateManyWithWhereWithoutUserInput = {
    where: UserSessionScalarWhereInput
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSessionScalarWhereInput = {
    AND?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    OR?: UserSessionScalarWhereInput[]
    NOT?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    token?: StringFilter<"UserSession"> | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    name?: string | null
    age?: number | null
    personalityType?: string | null
    anxietyLevel?: number | null
    provider?: string | null
    providerId?: string | null
    isEmailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    decisions?: DecisionCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorCreateNestedManyWithoutUserInput
    algorithmPerfs?: AlgorithmPerformanceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    name?: string | null
    age?: number | null
    personalityType?: string | null
    anxietyLevel?: number | null
    provider?: string | null
    providerId?: string | null
    isEmailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    decisions?: DecisionUncheckedCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutUserInput
    algorithmPerfs?: AlgorithmPerformanceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    personalityType?: NullableStringFieldUpdateOperationsInput | string | null
    anxietyLevel?: NullableIntFieldUpdateOperationsInput | number | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    decisions?: DecisionUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutUserNestedInput
    algorithmPerfs?: AlgorithmPerformanceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    personalityType?: NullableStringFieldUpdateOperationsInput | string | null
    anxietyLevel?: NullableIntFieldUpdateOperationsInput | number | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    decisions?: DecisionUncheckedUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutUserNestedInput
    algorithmPerfs?: AlgorithmPerformanceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDecisionsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    name?: string | null
    age?: number | null
    personalityType?: string | null
    anxietyLevel?: number | null
    provider?: string | null
    providerId?: string | null
    isEmailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    behaviors?: UserBehaviorCreateNestedManyWithoutUserInput
    algorithmPerfs?: AlgorithmPerformanceCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDecisionsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    name?: string | null
    age?: number | null
    personalityType?: string | null
    anxietyLevel?: number | null
    provider?: string | null
    providerId?: string | null
    isEmailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutUserInput
    algorithmPerfs?: AlgorithmPerformanceUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDecisionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDecisionsInput, UserUncheckedCreateWithoutDecisionsInput>
  }

  export type DecisionOptionCreateWithoutDecisionInput = {
    id?: string
    optionText: string
    userRating?: number | null
    aiScore?: number | null
    criteriaScores?: string | null
    createdAt?: Date | string
  }

  export type DecisionOptionUncheckedCreateWithoutDecisionInput = {
    id?: string
    optionText: string
    userRating?: number | null
    aiScore?: number | null
    criteriaScores?: string | null
    createdAt?: Date | string
  }

  export type DecisionOptionCreateOrConnectWithoutDecisionInput = {
    where: DecisionOptionWhereUniqueInput
    create: XOR<DecisionOptionCreateWithoutDecisionInput, DecisionOptionUncheckedCreateWithoutDecisionInput>
  }

  export type DecisionOptionCreateManyDecisionInputEnvelope = {
    data: DecisionOptionCreateManyDecisionInput | DecisionOptionCreateManyDecisionInput[]
  }

  export type UserUpsertWithoutDecisionsInput = {
    update: XOR<UserUpdateWithoutDecisionsInput, UserUncheckedUpdateWithoutDecisionsInput>
    create: XOR<UserCreateWithoutDecisionsInput, UserUncheckedCreateWithoutDecisionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDecisionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDecisionsInput, UserUncheckedUpdateWithoutDecisionsInput>
  }

  export type UserUpdateWithoutDecisionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    personalityType?: NullableStringFieldUpdateOperationsInput | string | null
    anxietyLevel?: NullableIntFieldUpdateOperationsInput | number | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    behaviors?: UserBehaviorUpdateManyWithoutUserNestedInput
    algorithmPerfs?: AlgorithmPerformanceUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDecisionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    personalityType?: NullableStringFieldUpdateOperationsInput | string | null
    anxietyLevel?: NullableIntFieldUpdateOperationsInput | number | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutUserNestedInput
    algorithmPerfs?: AlgorithmPerformanceUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DecisionOptionUpsertWithWhereUniqueWithoutDecisionInput = {
    where: DecisionOptionWhereUniqueInput
    update: XOR<DecisionOptionUpdateWithoutDecisionInput, DecisionOptionUncheckedUpdateWithoutDecisionInput>
    create: XOR<DecisionOptionCreateWithoutDecisionInput, DecisionOptionUncheckedCreateWithoutDecisionInput>
  }

  export type DecisionOptionUpdateWithWhereUniqueWithoutDecisionInput = {
    where: DecisionOptionWhereUniqueInput
    data: XOR<DecisionOptionUpdateWithoutDecisionInput, DecisionOptionUncheckedUpdateWithoutDecisionInput>
  }

  export type DecisionOptionUpdateManyWithWhereWithoutDecisionInput = {
    where: DecisionOptionScalarWhereInput
    data: XOR<DecisionOptionUpdateManyMutationInput, DecisionOptionUncheckedUpdateManyWithoutDecisionInput>
  }

  export type DecisionOptionScalarWhereInput = {
    AND?: DecisionOptionScalarWhereInput | DecisionOptionScalarWhereInput[]
    OR?: DecisionOptionScalarWhereInput[]
    NOT?: DecisionOptionScalarWhereInput | DecisionOptionScalarWhereInput[]
    id?: StringFilter<"DecisionOption"> | string
    decisionId?: StringFilter<"DecisionOption"> | string
    optionText?: StringFilter<"DecisionOption"> | string
    userRating?: IntNullableFilter<"DecisionOption"> | number | null
    aiScore?: FloatNullableFilter<"DecisionOption"> | number | null
    criteriaScores?: StringNullableFilter<"DecisionOption"> | string | null
    createdAt?: DateTimeFilter<"DecisionOption"> | Date | string
  }

  export type DecisionCreateWithoutOptionsInput = {
    id?: string
    decisionType: string
    title: string
    description?: string | null
    chosenOption?: string | null
    confidenceScore?: number | null
    outcomeRating?: number | null
    contextData?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutDecisionsInput
  }

  export type DecisionUncheckedCreateWithoutOptionsInput = {
    id?: string
    userId: string
    decisionType: string
    title: string
    description?: string | null
    chosenOption?: string | null
    confidenceScore?: number | null
    outcomeRating?: number | null
    contextData?: string | null
    createdAt?: Date | string
  }

  export type DecisionCreateOrConnectWithoutOptionsInput = {
    where: DecisionWhereUniqueInput
    create: XOR<DecisionCreateWithoutOptionsInput, DecisionUncheckedCreateWithoutOptionsInput>
  }

  export type DecisionUpsertWithoutOptionsInput = {
    update: XOR<DecisionUpdateWithoutOptionsInput, DecisionUncheckedUpdateWithoutOptionsInput>
    create: XOR<DecisionCreateWithoutOptionsInput, DecisionUncheckedCreateWithoutOptionsInput>
    where?: DecisionWhereInput
  }

  export type DecisionUpdateToOneWithWhereWithoutOptionsInput = {
    where?: DecisionWhereInput
    data: XOR<DecisionUpdateWithoutOptionsInput, DecisionUncheckedUpdateWithoutOptionsInput>
  }

  export type DecisionUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    decisionType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    chosenOption?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    outcomeRating?: NullableIntFieldUpdateOperationsInput | number | null
    contextData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDecisionsNestedInput
  }

  export type DecisionUncheckedUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    decisionType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    chosenOption?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    outcomeRating?: NullableIntFieldUpdateOperationsInput | number | null
    contextData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutBehaviorsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    name?: string | null
    age?: number | null
    personalityType?: string | null
    anxietyLevel?: number | null
    provider?: string | null
    providerId?: string | null
    isEmailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    decisions?: DecisionCreateNestedManyWithoutUserInput
    algorithmPerfs?: AlgorithmPerformanceCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBehaviorsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    name?: string | null
    age?: number | null
    personalityType?: string | null
    anxietyLevel?: number | null
    provider?: string | null
    providerId?: string | null
    isEmailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    decisions?: DecisionUncheckedCreateNestedManyWithoutUserInput
    algorithmPerfs?: AlgorithmPerformanceUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBehaviorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBehaviorsInput, UserUncheckedCreateWithoutBehaviorsInput>
  }

  export type UserUpsertWithoutBehaviorsInput = {
    update: XOR<UserUpdateWithoutBehaviorsInput, UserUncheckedUpdateWithoutBehaviorsInput>
    create: XOR<UserCreateWithoutBehaviorsInput, UserUncheckedCreateWithoutBehaviorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBehaviorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBehaviorsInput, UserUncheckedUpdateWithoutBehaviorsInput>
  }

  export type UserUpdateWithoutBehaviorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    personalityType?: NullableStringFieldUpdateOperationsInput | string | null
    anxietyLevel?: NullableIntFieldUpdateOperationsInput | number | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    decisions?: DecisionUpdateManyWithoutUserNestedInput
    algorithmPerfs?: AlgorithmPerformanceUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBehaviorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    personalityType?: NullableStringFieldUpdateOperationsInput | string | null
    anxietyLevel?: NullableIntFieldUpdateOperationsInput | number | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    decisions?: DecisionUncheckedUpdateManyWithoutUserNestedInput
    algorithmPerfs?: AlgorithmPerformanceUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAlgorithmPerfsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    name?: string | null
    age?: number | null
    personalityType?: string | null
    anxietyLevel?: number | null
    provider?: string | null
    providerId?: string | null
    isEmailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    decisions?: DecisionCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAlgorithmPerfsInput = {
    id?: string
    email: string
    passwordHash?: string | null
    name?: string | null
    age?: number | null
    personalityType?: string | null
    anxietyLevel?: number | null
    provider?: string | null
    providerId?: string | null
    isEmailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    decisions?: DecisionUncheckedCreateNestedManyWithoutUserInput
    behaviors?: UserBehaviorUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAlgorithmPerfsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAlgorithmPerfsInput, UserUncheckedCreateWithoutAlgorithmPerfsInput>
  }

  export type UserUpsertWithoutAlgorithmPerfsInput = {
    update: XOR<UserUpdateWithoutAlgorithmPerfsInput, UserUncheckedUpdateWithoutAlgorithmPerfsInput>
    create: XOR<UserCreateWithoutAlgorithmPerfsInput, UserUncheckedCreateWithoutAlgorithmPerfsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAlgorithmPerfsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAlgorithmPerfsInput, UserUncheckedUpdateWithoutAlgorithmPerfsInput>
  }

  export type UserUpdateWithoutAlgorithmPerfsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    personalityType?: NullableStringFieldUpdateOperationsInput | string | null
    anxietyLevel?: NullableIntFieldUpdateOperationsInput | number | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    decisions?: DecisionUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAlgorithmPerfsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    personalityType?: NullableStringFieldUpdateOperationsInput | string | null
    anxietyLevel?: NullableIntFieldUpdateOperationsInput | number | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    decisions?: DecisionUncheckedUpdateManyWithoutUserNestedInput
    behaviors?: UserBehaviorUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DecisionCreateManyUserInput = {
    id?: string
    decisionType: string
    title: string
    description?: string | null
    chosenOption?: string | null
    confidenceScore?: number | null
    outcomeRating?: number | null
    contextData?: string | null
    createdAt?: Date | string
  }

  export type UserBehaviorCreateManyUserInput = {
    id?: string
    sessionId: string
    actionType: string
    pageUrl?: string | null
    elementClicked?: string | null
    timeSpent?: number | null
    hesitationTime?: number | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type AlgorithmPerformanceCreateManyUserInput = {
    id?: string
    algorithmType: string
    inputData: string
    outputData: string
    userSatisfaction?: number | null
    processingTime: number
    createdAt?: Date | string
  }

  export type UserSessionCreateManyUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type DecisionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    decisionType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    chosenOption?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    outcomeRating?: NullableIntFieldUpdateOperationsInput | number | null
    contextData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: DecisionOptionUpdateManyWithoutDecisionNestedInput
  }

  export type DecisionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    decisionType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    chosenOption?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    outcomeRating?: NullableIntFieldUpdateOperationsInput | number | null
    contextData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: DecisionOptionUncheckedUpdateManyWithoutDecisionNestedInput
  }

  export type DecisionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    decisionType?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    chosenOption?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    outcomeRating?: NullableIntFieldUpdateOperationsInput | number | null
    contextData?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBehaviorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    pageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    elementClicked?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    hesitationTime?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBehaviorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    pageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    elementClicked?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    hesitationTime?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBehaviorUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    pageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    elementClicked?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpent?: NullableIntFieldUpdateOperationsInput | number | null
    hesitationTime?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlgorithmPerformanceUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    algorithmType?: StringFieldUpdateOperationsInput | string
    inputData?: StringFieldUpdateOperationsInput | string
    outputData?: StringFieldUpdateOperationsInput | string
    userSatisfaction?: NullableIntFieldUpdateOperationsInput | number | null
    processingTime?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlgorithmPerformanceUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    algorithmType?: StringFieldUpdateOperationsInput | string
    inputData?: StringFieldUpdateOperationsInput | string
    outputData?: StringFieldUpdateOperationsInput | string
    userSatisfaction?: NullableIntFieldUpdateOperationsInput | number | null
    processingTime?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlgorithmPerformanceUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    algorithmType?: StringFieldUpdateOperationsInput | string
    inputData?: StringFieldUpdateOperationsInput | string
    outputData?: StringFieldUpdateOperationsInput | string
    userSatisfaction?: NullableIntFieldUpdateOperationsInput | number | null
    processingTime?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DecisionOptionCreateManyDecisionInput = {
    id?: string
    optionText: string
    userRating?: number | null
    aiScore?: number | null
    criteriaScores?: string | null
    createdAt?: Date | string
  }

  export type DecisionOptionUpdateWithoutDecisionInput = {
    id?: StringFieldUpdateOperationsInput | string
    optionText?: StringFieldUpdateOperationsInput | string
    userRating?: NullableIntFieldUpdateOperationsInput | number | null
    aiScore?: NullableFloatFieldUpdateOperationsInput | number | null
    criteriaScores?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DecisionOptionUncheckedUpdateWithoutDecisionInput = {
    id?: StringFieldUpdateOperationsInput | string
    optionText?: StringFieldUpdateOperationsInput | string
    userRating?: NullableIntFieldUpdateOperationsInput | number | null
    aiScore?: NullableFloatFieldUpdateOperationsInput | number | null
    criteriaScores?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DecisionOptionUncheckedUpdateManyWithoutDecisionInput = {
    id?: StringFieldUpdateOperationsInput | string
    optionText?: StringFieldUpdateOperationsInput | string
    userRating?: NullableIntFieldUpdateOperationsInput | number | null
    aiScore?: NullableFloatFieldUpdateOperationsInput | number | null
    criteriaScores?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DecisionCountOutputTypeDefaultArgs instead
     */
    export type DecisionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DecisionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserSessionDefaultArgs instead
     */
    export type UserSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DecisionDefaultArgs instead
     */
    export type DecisionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DecisionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DecisionOptionDefaultArgs instead
     */
    export type DecisionOptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DecisionOptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserBehaviorDefaultArgs instead
     */
    export type UserBehaviorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserBehaviorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlgorithmPerformanceDefaultArgs instead
     */
    export type AlgorithmPerformanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlgorithmPerformanceDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}