version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: decision_helper_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: decision_helper_db
      POSTGRES_USER: decision_user
      POSTGRES_PASSWORD: decision_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - decision_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U decision_user -d decision_helper_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: decision_helper_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - decision_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: decision_helper_backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://decision_user:decision_password_2024@postgres:5432/decision_helper_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-development
      JWT_EXPIRES_IN: 24h
      FRONTEND_URL: http://localhost:3000
    volumes:
      - ./src:/app/src
      - ./prisma:/app/prisma
      - ./logs:/app/logs
    networks:
      - decision_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Service (Python)
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: decision_helper_ml
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      PYTHONPATH: /app
      DATABASE_URL: postgresql://decision_user:decision_password_2024@postgres:5432/decision_helper_db
      REDIS_URL: redis://redis:6379
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY:-}
    volumes:
      - ./ml-service:/app
    networks:
      - decision_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: decision_helper_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - decision_network
    depends_on:
      - backend
      - ml-service
    profiles:
      - production

  # Database Admin (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: decision_helper_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@decision-helper.com
      PGADMIN_DEFAULT_PASSWORD: admin_password_2024
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - decision_network
    depends_on:
      - postgres
    profiles:
      - dev-tools

  # Redis Commander (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: decision_helper_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - decision_network
    depends_on:
      - redis
    profiles:
      - dev-tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  decision_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
