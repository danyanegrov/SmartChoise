import streamlit as st
import requests
import json
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import time

# Page configuration
st.set_page_config(
    page_title="SmartChoice AI",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# API configuration
API_BASE_URL = "http://localhost:8000/api/v1"

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #ff7f0e;
        margin-bottom: 1rem;
    }
    .recommendation-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        border-left: 4px solid #1f77b4;
    }
    .metric-card {
        background-color: #ffffff;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

def check_api_health():
    """Check if API is running"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        return response.status_code == 200, response.json()
    except:
        return False, {}

def get_recommendations(query, user_id=None, filters=None, limit=10):
    """Get recommendations from API"""
    try:
        payload = {
            "query": query,
            "user_id": user_id,
            "filters": filters or {},
            "limit": limit
        }
        response = requests.post(f"{API_BASE_URL}/recommendations", json=payload, timeout=30)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"API Error: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"Request failed: {str(e)}")
        return None

def process_nlp(text):
    """Process text with NLP"""
    try:
        payload = {"text": text, "user_context": {}}
        response = requests.post(f"{API_BASE_URL}/nlp/process", json=payload, timeout=30)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"NLP API Error: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"NLP request failed: {str(e)}")
        return None

def search_items(query=None, category_id=None, min_price=None, max_price=None, limit=20):
    """Search items"""
    try:
        params = {
            "query": query,
            "category_id": category_id,
            "min_price": min_price,
            "max_price": max_price,
            "limit": limit
        }
        # Remove None values
        params = {k: v for k, v in params.items() if v is not None}
        
        response = requests.get(f"{API_BASE_URL}/search", params=params, timeout=30)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Search API Error: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"Search request failed: {str(e)}")
        return None

def get_categories():
    """Get all categories"""
    try:
        response = requests.get(f"{API_BASE_URL}/categories", timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            return []
    except:
        return []

def main():
    # Header
    st.markdown('<h1 class="main-header">üß† SmartChoice AI</h1>', unsafe_allow_html=True)
    st.markdown('<p style="text-align: center; font-size: 1.2rem; color: #666;">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å AI</p>', unsafe_allow_html=True)
    
    # Check API health
    api_healthy, health_data = check_api_health()
    
    if not api_healthy:
        st.error("‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        st.stop()
    
    # Sidebar
    st.sidebar.title("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # API Status
    st.sidebar.subheader("üìä –°—Ç–∞—Ç—É—Å API")
    if health_data:
        status_color = "üü¢" if health_data.get("status") == "healthy" else "üî¥"
        st.sidebar.write(f"{status_color} –°—Ç–∞—Ç—É—Å: {health_data.get('status', 'unknown')}")
        st.sidebar.write(f"üìÖ –í—Ä–µ–º—è: {health_data.get('timestamp', 'unknown')}")
        st.sidebar.write(f"üîå –í–µ—Ä—Å–∏—è: {health_data.get('version', 'unknown')}")
    
    # User ID input
    user_id = st.sidebar.number_input("üë§ User ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", min_value=1, value=None, help="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    # Main tabs
    tab1, tab2, tab3, tab4 = st.tabs(["üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üîç –ü–æ–∏—Å–∫", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üß† NLP –ê–Ω–∞–ª–∏–∑"])
    
    with tab1:
        st.markdown('<h2 class="sub-header">üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>', unsafe_allow_html=True)
        
        # Query input
        query = st.text_input("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–π–¥–∏ –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        
        # Filters
        col1, col2, col3 = st.columns(3)
        with col1:
            max_price = st.number_input("üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (—Ä—É–±):", min_value=0, value=100000)
        with col2:
            min_rating = st.number_input("‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:", min_value=0.0, max_value=5.0, value=4.0, step=0.1)
        with col3:
            limit = st.number_input("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", min_value=1, max_value=50, value=10)
        
        # Get recommendations button
        if st.button("üöÄ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", type="primary"):
            if query:
                with st.spinner("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
                    filters = {
                        "max_price": max_price,
                        "min_rating": min_rating
                    }
                    
                    result = get_recommendations(query, user_id, filters, limit)
                    
                    if result:
                        # Display results
                        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {result.get('total_found', 0)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
                        
                        # Query info
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å", result.get('processed_query', ''))
                        with col2:
                            st.metric("üéØ –ù–∞–º–µ—Ä–µ–Ω–∏–µ", result.get('intent', ''))
                        with col3:
                            st.metric("‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{result.get('processing_time_ms', 0)} –º—Å")
                        
                        # Recommendations
                        st.subheader("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                        for i, rec in enumerate(result.get('recommendations', []), 1):
                            with st.container():
                                st.markdown(f"""
                                <div class="recommendation-card">
                                    <h4>#{i} {rec.get('item', {}).get('name', 'Unknown')}</h4>
                                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {rec.get('item', {}).get('description', 'No description')}</p>
                                    <p><strong>–¶–µ–Ω–∞:</strong> {rec.get('item', {}).get('price', 0)} —Ä—É–±</p>
                                    <p><strong>–†–µ–π—Ç–∏–Ω–≥:</strong> {rec.get('item', {}).get('rating', 0)} ‚≠ê</p>
                                    <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> {rec.get('confidence', 0):.2f}</p>
                                    <p><strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong> {rec.get('explanation', 'No explanation')}</p>
                                </div>
                                """, unsafe_allow_html=True)
                        
                        # Save query ID for feedback
                        if 'query_id' in result:
                            st.session_state['last_query_id'] = result['query_id']
                        
                        # Feedback section
                        st.subheader("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
                        rating = st.slider("–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:", 1, 5, 3)
                        feedback_text = st.text_area("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
                        
                        if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"):
                            # Here you would send feedback to API
                            st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üôè")
            else:
                st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
    
    with tab2:
        st.markdown('<h2 class="sub-header">üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤</h2>', unsafe_allow_html=True)
        
        # Search form
        col1, col2 = st.columns(2)
        with col1:
            search_query = st.text_input("üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ")
            category_id = st.selectbox("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:", options=[None] + get_categories(), format_func=lambda x: x.get('name') if x else "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        with col2:
            min_price = st.number_input("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:", min_value=0, value=0)
            max_price = st.number_input("üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:", min_value=0, value=100000)
        
        if st.button("üîç –ù–∞–π—Ç–∏", type="primary"):
            if search_query or category_id or min_price > 0 or max_price < 100000:
                with st.spinner("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫..."):
                    result = search_items(
                        query=search_query if search_query else None,
                        category_id=category_id.get('id') if category_id else None,
                        min_price=min_price if min_price > 0 else None,
                        max_price=max_price if max_price < 100000 else None
                    )
                    
                    if result:
                        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {result.get('total', 0)} —Ç–æ–≤–∞—Ä–æ–≤")
                        
                        # Display items
                        items = result.get('items', [])
                        if items:
                            # Convert to DataFrame for better display
                            df = pd.DataFrame(items)
                            st.dataframe(df, use_container_width=True)
                        else:
                            st.info("üì≠ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                st.warning("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞")
    
    with tab3:
        st.markdown('<h2 class="sub-header">üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>', unsafe_allow_html=True)
        
        # Metrics
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown("""
            <div class="metric-card">
                <h3>üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</h3>
                <h2>1,234</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="metric-card">
                <h3>üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å</h3>
                <h2>94.2%</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class="metric-card">
                <h3>‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</h3>
                <h2>245 –º—Å</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown("""
            <div class="metric-card">
                <h3>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                <h2>567</h2>
            </div>
            """, unsafe_allow_html=True)
        
        # Charts
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            categories_data = {
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–û–¥–µ–∂–¥–∞', '–ö–Ω–∏–≥–∏', '–°–ø–æ—Ä—Ç', '–î–æ–º'],
                '–ó–∞–ø—Ä–æ—Å—ã': [45, 32, 28, 19, 15]
            }
            df_cat = pd.DataFrame(categories_data)
            fig = px.bar(df_cat, x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', y='–ó–∞–ø—Ä–æ—Å—ã', color='–ó–∞–ø—Ä–æ—Å—ã')
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader("üìà –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            time_data = {
                '–í—Ä–µ–º—è': list(range(24)),
                '–ó–∞–ø—Ä–æ—Å—ã': [12, 8, 5, 3, 2, 1, 2, 8, 15, 22, 28, 35, 42, 38, 32, 28, 25, 30, 35, 28, 22, 18, 15, 12]
            }
            df_time = pd.DataFrame(time_data)
            fig = px.line(df_time, x='–í—Ä–µ–º—è', y='–ó–∞–ø—Ä–æ—Å—ã', title='–ó–∞–ø—Ä–æ—Å—ã –ø–æ —á–∞—Å–∞–º')
            st.plotly_chart(fig, use_container_width=True)
    
    with tab4:
        st.markdown('<h2 class="sub-header">üß† NLP –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞</h2>', unsafe_allow_html=True)
        
        # Text input
        nlp_text = st.text_area("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", 
                               placeholder="–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...",
                               height=150)
        
        if st.button("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
            if nlp_text:
                with st.spinner("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç..."):
                    nlp_result = process_nlp(nlp_text)
                    
                    if nlp_result:
                        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        
                        # Display results
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.subheader("üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                            st.write(f"**–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:** {nlp_result.get('original_text', '')}")
                            st.write(f"**–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:** {nlp_result.get('cleaned_text', '')}")
                            st.write(f"**–ù–∞–º–µ—Ä–µ–Ω–∏–µ:** {nlp_result.get('intent', '')}")
                            st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏—è:** {nlp_result.get('intent_confidence', 0):.2f}")
                            st.write(f"**–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** {nlp_result.get('sentiment', '')}")
                            st.write(f"**–û—Ü–µ–Ω–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:** {nlp_result.get('sentiment_score', 0):.2f}")
                        
                        with col2:
                            st.subheader("üîç –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞")
                            st.write(f"**–¢–æ–∫–µ–Ω—ã:** {', '.join(nlp_result.get('tokens', [])[:10])}...")
                            
                            # Entities
                            entities = nlp_result.get('entities', [])
                            if entities:
                                st.write("**–°—É—â–Ω–æ—Å—Ç–∏:**")
                                for entity in entities:
                                    st.write(f"- {entity.get('text', '')} ({entity.get('label', '')})")
                            
                            # Filters
                            filters = nlp_result.get('filters', {})
                            if filters:
                                st.write("**–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:**")
                                for key, value in filters.items():
                                    st.write(f"- {key}: {value}")
                        
                        # Embedding visualization (simplified)
                        st.subheader("üìä –í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ")
                        embedding = nlp_result.get('embedding', [])
                        if embedding:
                            # Show first 50 dimensions
                            fig = px.line(y=embedding[:50], title="–ü–µ—Ä–≤—ã–µ 50 –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤–µ–∫—Ç–æ—Ä–∞")
                            st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    main()
